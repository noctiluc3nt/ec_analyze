[["index.html", "Reddy: An open-source package for analyzing eddy-covariance data 1 Introduction 1.1 Measurement setup and instrumentation 1.2 Data sources", " Reddy: An open-source package for analyzing eddy-covariance data 1 Introduction An introduction to eddy-covariance measurements and their meteorological evaluation Package: Reddy package (Github) Gitbook: jupyter notebooks (Github) Eddy-covariance (EC) measurements allow to measure turbulent fluxes directly and non-invasively over long periods of time, and thus represent the standard measurement method for turbulent exchange processes between atmosphere and land/vegetation/cryosphere/hydrosphere. However, they require a thought-through technical setup and a special post-processing, before further analysis can be carried out. This gitbook provides an overview about the setup, post-processing and meteorological evaluation of EC measurements, which can be used for research and teaching. The structure of this gitbook is detailed in figure 1. All described functions are implemented in the R-package Reddy, which was specially developed to allow a reproducible and comprehensive analysis of EC measurements. Figure 1: Overview of the topics in this gitbook and the functionality of the Reddy package 1.1 Measurement setup and instrumentation Setup: An EC setup has two main components: the sonic anemometer (for the wind vector and temperature) and a gasanalyzer (for water vapor, carbon dioxide, methane, …). The sonic usually consists of three pairs of transducers, that transmit and receive ultra-sonic sound waves whose propagation speed depends on wind speed, temperature and humidity. Therefrom, the three wind components and the sonic temperature, which is approximately the virtual temperature, can be derived. The gasanalyzers utilize usually an absorption line in the near- or mid-infrared of the respective trace gas, to measure their number density (IRGA - infrared gas analyzer). There are different types of infrared gasanalyzer, the most common difference beeing between gasanalyzers with closed or open measuring path. Further possible methods for gasanalyzers are laser spectroscopy, mass spectroscopy, chromatography and chemiluminescence (often used for NOx) and also particle flux measurements can be combined with sonic measurements to derive particle fluxes. The EC system can be mounted on a tower or mast with one or several measurement heights. For choosing the location and measurement height, the surface roughness and the flux footprint (i.e., the area where the flux originates from) are examined. Since the mast or tower disturb the EC measurements, the orientation of the system is chosen based on the prevailing wind direction, such that the main wind direction(s) are undisturbed by the tower structures, as exemplified in figure 3. The sonics have an internal orientation (and should be oriented northwards) and be levelled (however, their exact levelling is not necessarily required since wind data is rotated in the post-processing anyway). [Figure 2: Eddy-covariance systems in a boreal forest (Sodankylä, Finland), an alpine tundra environment (Finse, Norway) and over a lake (Kuivajärvi, Finland).] Calibration and Maintainance: The EC system requires regular maintainance, in particular the gasanalyzers. The gasanalyzers are calibrated regularly in-field and, more rarely, intensively by the manufacturer. For this prupose, reference measurements are carried out with gas cylinders containing a fixed amount of the gas, e.g. zero-gas or 450 ppm CO\\(_2\\). For water vapor, usually only the zero-gas calibration is performed, since fixed water vapor concentrations are difficult to maintain. For other trace gases, the in-field calibration is performed with a zero-gas and another fixed concentration, while the manufacturer calibrates for several fixed gas concentrations. The optics of the gasanalyzer have to be cleaned regulary depending on the environmental conditions, whereby open-path gasanalyzers require more maintainance than closed-path gasanalyzers. Additionally, the inlet filters should be cleaned or replaced regulary as well as the sampling tube. The sonic requires less maintainance, however, the measurements are sensitive to the distance of the transducer pairs, so their distance should be checked. Figure 3: Components of an eddy-covariance system (demonstration setup) 1.2 Data sources There are several coordinated FLUXNETs, which standardise eddy-covariance measurements regionally or globally and provide post-processed flux data. For example: FLUXNET: data set FLUXNET2015 ICOS (Integrated Carbon Observation System): data portal for data download "],["post-processing-of-raw-eddy-covariance-data.html", "2 Post-processing of raw eddy-covariance data 2.1 Eddy-covariance method 2.2 Raw data handling and corrections 2.3 An example post-processing routine", " 2 Post-processing of raw eddy-covariance data To derive turbulent fluxes and other turbulence characteristics from eddy-covariance measurements, they have to be post-processed first. In the following, we will have a look a the required steps – starting with the theoretical foundation of the method and the necessary physical and technical considerations for the raw data processing. The upcoming analysis (e.g., 02_basic-turbulence-diagnostics.ipynb) build upon this and allow for a more detailed analysis (e.g., 03_quadrant-analysis.ipynb). 2.1 Eddy-covariance method How do we derive a flux from the sonic measurements? The eddy-covariance method is based on the Reynolds decomposition, which is applied to every measured quantity \\(x\\) through \\[ x = \\overline{x} + x&#39; \\quad \\textrm{with} \\quad \\overline{x}:= \\frac{1}{t_s} \\int_0^{t_s} x \\: dt. \\] Therein, \\(\\overline{x}\\) represents the time average and \\(x&#39;\\) the deviation from it. In principle, one would have to consider the ensemble average (i.e., all possible path in the phase space), but this is replaced by the time average assuming ergodicity. Now, we take a look at the flux, which is defined as the average product of two quantities \\(\\overline{xw}\\), and insert the Reynolds decomposition: \\[ \\overline{xw} = \\overline{x}\\:\\overline{w} + \\overline{x}\\overline{w&#39;} + \\overline{x&#39;}\\overline{w} + \\overline{x&#39;w&#39;} \\\\ = \\overline{x}\\:\\overline{w} + \\overline{x&#39;w&#39;} \\] The second and third term vanish because of the Reynolds postulates (i.e. \\(\\overline{x&#39;} = 0\\)). If additionally \\(\\overline{w}=0\\), the flux can be represented by the correlation, i.e., \\(\\overline{xw} = \\overline{x&#39;w&#39;}\\). As you see, this procedure involves a lot of assumptions: For \\(\\overline{x&#39;} = 0\\) to be true, we assume that the flow is steady and for \\(\\overline{w}=0\\) you either have a homogeneous and flat surface or you need to rotate the sonic coordiante system (see the correction methods below). Usually, \\(w\\) represents the vertical wind speed and \\(x\\) can be an arbitrary scalar quantity. For the momentum flux, we use \\(x=u\\) (streamwise velocity), for the sensible heat flux \\(x=T\\) (temperature or potential temperature), for the latent heat flux \\(x=q\\) (specific humidity) and for trace gas fluxes \\(x=c\\) (the concentration of the respective trace gas). 2.2 Raw data handling and corrections For applying the described eddy-covariance method to the measurements, we have to decide on an averaging time \\(t_s\\), have to perform quality control of the raw data and have to check the fulfillment of the made assumptions. 2.2.1 Choosing a suitable averaging time As we have seen above, for calculating the fluxes with the eddy-covariance method, a suitable averaging time (\\(t_s\\)) should be chosen. For this several things need to be considered: Generally, one can say that the longer the averaging time, the less likely it is that the conditions are steady (which is an assumption in method), but short averaging times miss low frequency contributions. So usually, an averaging time of 30 minutes is chosen. However, this averaging time can still be too long if the turbulence is very intermittent, which is the case for very stable conditions. Consequently, some studies use the 30 minutes average just for unstable stratification and an averaging time of 1 to 10 minutes for stable conditions. It is recommendable to first study the characteristics of the sampled raw data (e.g., based on spectra) and then chose an averaging time. 2.2.2 Overview of correction procedures applied to the raw data Despiking (despiking): Removing from spikes in the raw data. For this usually three methods are applied: (1) based on pre-defined thresholds (i.e., an expected temperature or wind speed interval), (2) median deviation (MAD) test, i.e., all measurements lie within a pre-defined range around the median, and (3) based on skewness (3. moment) and kurtosis (4. moment), i.e., the skewness and kurtosis of the considered interval do not exceed pre-defined values Lag-time correction (shift2maxccf): Lag-time can occur if several loggers are used or the inlet tube of the gas analyzer is very long, such that there is a time offset between different measurment variables. This can be corrected by calculating the maximum cross-correlation and shift the time series according to the lag difference, which is done by the function shift2maxccf. Detrending (pracma::detrending): Linear detrending by substracting the mean value (however, linear detrending is not consistent with Reynolds decomposition, so it should be used/interpreted with caution) Rotation (rotate_double or rotate_planar): Rotation of the sonic coordinate system. Since the orientation of the sonic is arbitrary, the measurements have to be interpreted in a suitable coordinate system. For this the natural coordinate systems is used, which means that it follows the stream lines and with the streamwise velocity component \\(u\\), the crosswise velocity component \\(v\\) and the vertical velocity component \\(w\\). To determine the orientation, two main approaches exist: Double rotation (rotate_double) alignes the sonic coordinate system with the streamlines for every averaging interval. Hence, this method can be applied near-real time. Planar fit rotation (rotate_planar) aligns the sonic coordinate system with the mean streamlines under the conditions that the mean vertical velocity \\(\\overline{w}\\) vanishes. For this, a time series is required and thus near-real time processing not possible. Generally, it is recommended to use double rotation in relatively simple topography, but planar fit in complex (micro-)topogaphy. The angles around which the sonic coordinate system was rotated also allow to estimate the quality of the measurements (the smaller the angle of rotation, the better and important is that they do not flip signs, in particular for close-to-zero fluxes under very stable stratification). Quality flagging (stationarity_flag,flag_w,flag_distortion,flag_most): Several quality flags (ranging from 0: the best to 2: the worst) can be applied. Common flags are: a stationarity flag (stationarity_flag), that test the alignment with the stationarity assumption of the eddy-covariance method, a vertical velocity flag (flag_w), which checks that remaining vertical velocity after the rotation is small, a flow distortion flag (flag_distortion), which removes the pre-defined wind directions that are possible affected/blocked by the mast, an integral turbulence characteristics flag (flag_itc), which test for the agreement with Monin-Obukhov similarity theory. However, these flags have to be applied purpose-oriented and interpreted with caution. Sometimes particularly “poorly flagged” measurements are interesting for investigating turbulence under challenging (and therefore interesting) conditions, e.g. under very stable stratification. SND (and cross-wind) correction (SNDcorrection): Converts the buoyancy flux to sensible heat flux. Since the sonics usually measure the sound velocity, the measured temperature (so called sonic temperature) is similar to the virtual temperature \\(T_s\\) and thus the resulting flux \\(\\overline{w&#39;T_s&#39;}\\) represents the buoyancy flux, which is about 10-20 % larger than the sensible heat flux \\(\\overline{w&#39;T&#39;}\\). Note, the used constants in the method depend on the measurement device (default for CSAT3). WPL correction (WPLcorrection): Converts volume- to mass-related quantities for trace gas fluxes. This correction only applies to trace gas concentration (water vapor, carbon dioxide, methane, …) measured with a gas analyzer. Unit conversion (ppt2rho): Converts ppt to density. Closed-path gas analyzer measure trace gas concentrations in parts-per-… (ppt: … thousand, ppm: … million) and have to be converted to a density based on the respective molar mass. There are more (and controversial) correction methods, details are discussed in Foken (2017). 2.3 An example post-processing routine Now, we create an example post-processing routine. For this, we use 3 days of raw eddy-covariance measurements (CSAT3/Campbell Scientific and Li-7200/LI-COR closed-path IR gas analyzer) with a 10 Hz sampling frequency from our station in Finse, Hardangervidda. #loading Reddy package install.packages(&quot;../src/Reddy_0.0.0.9000.tar.gz&quot;,repos=NULL,source=TRUE) library(Reddy) Installing package into ‘/home/lauracma/R/x86_64-pc-linux-gnu-library/4.0’ (as ‘lib’ is unspecified) #ec data files dir_in=&quot;../data/ec-data_10Hz_raw&quot; files=list.files(dir_in,full.names=TRUE) nf=length(files) Each given file contains 30 minutes of measurements, such that we just need to average over one file to get the 30 minutes averages and fluxes. In the notebook 04_multiresolution-decomposition.ipynb we will have a look at method that allows to determine suitable averaging times more accurately. The data is first despiked, than the wind is rotated and the sonic measurements are averaged. For the gas analyzer measurements, the unit is converted to a density. Then the turbulence intensities (standard deviation) and the fluxes (covariances) are calculated. For the sensible heat flux, we need to apply the SND correction additionally, the WPL correction can be applied to the latent heat flux. #allocate output var_out=c(&quot;time&quot;,&quot;u_mean&quot;,&quot;v_mean&quot;,&quot;w_mean&quot;,&quot;ws_mean&quot;,&quot;wd_mean&quot;,&quot;T_mean&quot;,&quot;h2o_mean&quot;,&quot;co2_mean&quot;, &quot;u_sd&quot;,&quot;v_sd&quot;,&quot;w_sd&quot;,&quot;T_sd&quot;,&quot;h2o_sd&quot;,&quot;co2_sd&quot;, &quot;cov_uv&quot;,&quot;cov_uw&quot;,&quot;cov_vw&quot;,&quot;cov_wT&quot;,&quot;cov_h2ow&quot;,&quot;cov_co2w&quot;,&quot;cov_wT_snd&quot;,&quot;cov_rhoH2Ow_wpl&quot;, &quot;rot_angle1&quot;,&quot;rot_angle2&quot;,&quot;flag_stationarity&quot;,&quot;flag_w&quot;,&quot;flag_distortion&quot;) nv=length(var_out) dat=data.frame(array(NA,dim=c(nf,nv))) colnames(dat)=var_out #postprocessing per file (30 mins) for (i in 1:nf) { tmp=read.table(files[i],sep=&quot;,&quot;,header=T) dat$time[i]=tmp$X[1] #despiking tmp$T_degC=despiking(tmp$T_degC,-40,30) tmp$u_m.s=despiking(tmp$u_m.s,-25,25) tmp$v_m.s=despiking(tmp$v_m.s,-25,25) tmp$w_m.s=despiking(tmp$w_m.s,-5,5) #wind before rotation dat$ws_mean[i]=sqrt(mean(tmp$u_m.s,na.rm=T)^2+mean(tmp$v_m.s,na.rm=T)^2) dat$wd_mean[i]=atan2(mean(tmp$v_m.s,na.rm=T),mean(tmp$u_m.s,na.rm=T)) #rotation rot_wind=rotate_double(tmp$u_m.s,tmp$v_m.s,tmp$w_m.s) tmp$u_m.s=rot_wind$u tmp$v_m.s=rot_wind$v tmp$w_m.s=rot_wind$w dat$rot_angle1[i]=rot_wind$theta dat$rot_angle2[i]=rot_wind$phi #averaging dat$u_mean[i]=mean(tmp$u_m.s,na.rm=T) dat$v_mean[i]=mean(tmp$v_m.s,na.rm=T) dat$w_mean[i]=mean(tmp$w_m.s,na.rm=T) dat$T_mean[i]=mean(tmp$T_degC,na.rm=T) #unit conversion for gases tmp$rhoH2O=ppt2rho(tmp$H2O_ppt,dat$T_mean[i]+273.15,87000) tmp$rhoCO2=ppt2rho(tmp$CO2_ppm/1000,dat$T_mean[i]+273.15,87000,gas=&quot;CO2&quot;) dat$h2o_mean[i]=mean(tmp$rhoH2O,na.rm=T) dat$co2_mean[i]=mean(tmp$rhoCO2,na.rm=T) #sds dat$u_sd[i]=sd(tmp$u_m.s,na.rm=T) dat$v_sd[i]=sd(tmp$v_m.s,na.rm=T) dat$w_sd[i]=sd(tmp$w_m.s,na.rm=T) dat$T_sd[i]=sd(tmp$T_degC,na.rm=T) dat$h2o_sd[i]=sd(tmp$rhoH2O,na.rm=T) dat$co2_sd[i]=sd(tmp$rhoCO2,na.rm=T) #covs dat$cov_uw[i]=cov(tmp$u_m.s,tmp$w_m.s,use=&quot;pairwise.complete.obs&quot;) dat$cov_uv[i]=cov(tmp$u_m.s,tmp$v_m.s,use=&quot;pairwise.complete.obs&quot;) dat$cov_vw[i]=cov(tmp$v_m.s,tmp$w_m.s,use=&quot;pairwise.complete.obs&quot;) dat$cov_wT[i]=cov(tmp$T_degC,tmp$w_m.s,use=&quot;pairwise.complete.obs&quot;) dat$cov_h2ow[i]=cov(tmp$rhoH2O,tmp$w_m.s,use=&quot;pairwise.complete.obs&quot;) dat$cov_co2w[i]=cov(tmp$rhoCO2,tmp$w_m.s,use=&quot;pairwise.complete.obs&quot;) #SND correction dat$cov_wT_snd[i]=SNDcorrection(tmp$u_m.s,tmp$v_m.s,tmp$w_m.s,tmp$T_degC+273.15) #WPL correction #dat$cov_rhoH2Ow_wpl[i]=WPLcorrection(tmp$rhoH2O,w=tmp$w_m.s,Ts=tmp$T_degC+273.15,q=tmp$q) #flagging dat$flag_stationarity[i]=flag_stationarity(tmp$w_m.s,tmp$T_degC,nsub=3000) dat$flag_w[i]=flag_w(dat$w_mean[i]) dat$flag_distortion[i]=flag_distortion(tmp$u_m.s,tmp$v_m.s,dir_blocked=c(340,360)) } The calculated covariances have to be converted to the fluxes (unit W/m\\(^2\\)), for example with the functions cov2shand cov2lh: #calculate fluxes dat$sh=cov2sh(dat$cov_wT_snd) dat$lh=cov2lh(dat$cov_h2ow) The output now contains the 30 minutes averages, standard deviations and covariances of the measured quantities, which will be used in the following notebooks for some more detailed analysis. #look at output head(dat) A data.frame: 127 × 30 time u_mean v_mean w_mean ws_mean wd_mean T_mean h2o_mean co2_mean u_sd ⋯ cov_co2w cov_wT_snd cov_rhoH2Ow_wpl rot_angle1 rot_angle2 flag_stationarity flag_w flag_distortion sh lh &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ⋯ &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; 2018-07-20 08:30:00 2.872084 -3.939352e-16 6.931732e-06 2.873170 -2.289284 15.86938 0.007254132 0.0006009614 1.0621428 ⋯ -1.567917e-07 0.105285787 NA -131.16630 0.34842842 0 0 NA 123.251207 103.108515 2018-07-20 09:00:00 2.864793 7.504684e-17 9.052527e-08 2.864538 -2.326045 16.55190 0.007584267 0.0005978138 1.1051216 ⋯ -2.294700e-07 0.160070314 NA -133.27259 0.77454172 0 0 NA 187.383880 162.619600 2018-07-20 09:30:00 3.996526 9.365292e-16 3.049021e-05 4.002522 -2.035397 17.05704 0.007472065 0.0005954894 1.4094952 ⋯ -1.862787e-07 0.153351409 NA -116.61967 0.28889573 0 0 NA 179.518496 123.571122 2018-07-20 10:00:00 4.998016 -2.812846e-16 -2.391239e-06 4.997530 -1.977737 17.60447 0.006762097 0.0005953881 1.2893259 ⋯ -1.504328e-07 0.155664878 NA -113.31596 0.34831201 0 0 NA 182.226723 123.447352 2018-07-20 10:30:00 4.879095 4.062636e-16 2.187117e-05 4.880696 -2.014489 18.08994 0.005410862 0.0005948927 1.4699485 ⋯ -1.989823e-07 0.191448808 NA -115.42174 0.65319222 0 0 NA 224.116637 191.164235 2018-07-20 11:00:00 5.225037 -8.977916e-17 -6.972624e-06 5.223984 -2.261205 18.24207 0.004422858 0.0005954766 1.3192267 ⋯ -1.330638e-07 0.149027117 NA -129.55749 0.44710739 0 0 NA 174.456329 150.843015 2018-07-20 11:30:00 5.896774 -7.481298e-16 -4.307951e-05 5.893156 -2.141157 18.50137 0.003765156 0.0005955767 1.4571181 ⋯ -1.312707e-07 0.157559904 NA -122.67927 0.81792595 0 0 NA 184.445107 161.171549 2018-07-20 12:00:00 5.211296 -3.062741e-16 -1.461607e-05 5.209715 -2.253118 18.57772 0.003418867 0.0005955199 1.2629639 ⋯ -1.288697e-07 0.147288599 NA -129.09416 0.70850506 0 0 NA 172.421160 167.032959 2018-07-20 12:30:00 4.295926 -7.486225e-16 -1.727795e-06 4.295548 -2.194560 18.80679 0.003522845 0.0005946848 1.3898230 ⋯ -1.343277e-07 0.150429440 NA -125.73902 0.55118076 0 0 NA 176.097937 171.821168 2018-07-20 13:00:00 3.973616 -4.304496e-16 -1.026732e-05 3.972403 -2.117721 18.78832 0.003276191 0.0005946895 1.4404999 ⋯ -1.394019e-07 0.144682715 NA -121.33650 0.58416349 0 0 NA 169.370621 173.852072 2018-07-20 13:30:00 1.520355 2.799239e-16 5.320330e-05 1.527719 1.749457 18.20841 0.005748607 0.0005944343 3.1235024 ⋯ -1.209975e-07 0.171911188 NA 100.23652 0.41171028 0 0 NA 201.245219 -89.529788 2018-07-20 14:00:00 6.940662 5.646526e-16 -2.889014e-05 6.936159 1.375615 16.21080 0.008946908 0.0005954275 1.4076910 ⋯ -2.003594e-07 0.139620668 NA 78.81692 0.38055423 0 0 NA 163.444813 112.745879 2018-07-20 14:30:00 6.416896 1.098171e-16 -2.196289e-05 6.414141 1.392954 15.81382 0.008976061 0.0005949455 1.2086952 ⋯ -2.123072e-07 0.120795796 NA 79.81038 0.50141324 0 0 NA 141.407763 103.198460 2018-07-20 15:00:00 6.321222 -3.078589e-16 -2.444517e-05 6.318381 1.480618 15.43666 0.008717666 0.0005955538 1.0829833 ⋯ -1.737773e-07 0.101715975 NA 84.83316 0.54901559 0 0 NA 119.072260 81.415559 2018-07-20 15:30:00 6.043490 -3.591949e-16 -2.272359e-05 6.041072 1.537172 15.27256 0.008609773 0.0005955597 1.0474320 ⋯ -1.625061e-07 0.092767213 NA 88.07349 0.63644762 0 0 NA 108.596528 81.701058 2018-07-20 16:00:00 5.939518 -1.692595e-16 -1.849441e-05 5.937431 1.496256 15.13815 0.008618070 0.0005955722 0.9961572 ⋯ -1.694039e-07 0.084952398 NA 85.72916 0.60281578 0 0 NA 99.448234 82.174082 2018-07-20 16:30:00 5.306554 2.974929e-16 -3.094122e-05 5.303926 1.505930 14.99383 0.008512352 0.0005958945 0.9426203 ⋯ -1.604182e-07 0.071198878 NA 86.28345 0.89501195 0 0 NA 83.347884 76.171833 2018-07-20 17:00:00 5.520015 4.660902e-17 -1.371344e-05 5.518476 1.527105 14.66441 0.008393601 0.0005971210 0.9157507 ⋯ -1.052333e-07 0.043069756 NA 87.49668 0.68897202 0 0 NA 50.418955 47.779392 2018-07-20 17:30:00 5.772783 5.944122e-16 -2.376498e-05 5.770532 1.526367 14.23050 0.008291716 0.0005985217 1.0008122 ⋯ -9.532674e-08 0.034922874 NA 87.45438 0.82061559 0 0 NA 40.881932 48.261033 2018-07-20 18:00:00 5.858808 4.427743e-16 -2.452174e-05 5.855744 1.474368 13.76722 0.008188837 0.0006000559 0.9311757 ⋯ -6.832866e-08 0.021616959 NA 84.47508 0.49358496 0 0 NA 25.305564 36.169862 2018-07-20 18:30:00 4.726868 -3.629108e-16 -2.609463e-05 4.724053 1.443867 13.42414 0.008213861 0.0006007363 0.8119707 ⋯ -4.526051e-08 0.006660012 NA 82.72747 0.58131225 1 0 NA 7.796442 28.714652 2018-07-20 19:00:00 5.235747 -4.403414e-16 -2.374174e-05 5.232331 1.446531 12.95281 0.008061974 0.0006026033 0.8973074 ⋯ -9.836328e-09 -0.003044785 NA 82.88014 0.41484529 1 0 NA -3.564331 21.349899 2018-07-20 19:30:00 4.888416 -5.150101e-16 -1.013674e-05 4.887055 1.424478 12.26218 0.007800124 0.0006059566 0.8556428 ⋯ 2.634083e-08 -0.010446773 NA 81.61656 0.49182960 0 0 NA -12.229356 16.702988 2018-07-20 20:00:00 4.186600 2.900506e-16 -1.165991e-05 4.184779 1.268382 11.69501 0.007702318 0.0006083613 0.8672731 ⋯ 6.448021e-08 -0.025728114 NA 72.67291 0.38725083 0 0 NA -30.118225 12.138708 2018-07-20 20:30:00 3.551020 -2.893889e-16 -1.814533e-06 3.555726 1.195096 11.06218 0.007535550 0.0006109579 1.0888968 ⋯ 6.581506e-08 -0.020063040 NA 68.47397 -0.02209129 0 0 NA -23.486493 8.825126 2018-07-20 21:00:00 3.181178 2.700118e-16 8.888365e-09 3.181144 1.108919 10.56345 0.007438288 0.0006128597 0.7279405 ⋯ 6.871569e-08 -0.021064154 NA 63.53635 -0.25485232 0 0 NA -24.658431 5.239288 2018-07-20 21:30:00 3.433915 -3.167000e-16 6.880287e-06 3.431664 1.203063 10.68381 0.007496276 0.0006119426 0.7405834 ⋯ 7.468146e-08 -0.023601111 NA 68.93044 -0.17637338 0 0 NA -27.628282 8.886297 2018-07-20 22:00:00 3.274341 -2.888448e-16 1.778441e-05 3.275246 1.495703 10.65175 0.007511255 0.0006121003 0.8838687 ⋯ 7.784352e-08 -0.021391491 NA 85.69748 0.82076630 0 0 NA -25.041624 7.859899 2018-07-20 22:30:00 2.803897 -2.616895e-16 1.775305e-05 2.807623 1.344351 10.09577 0.007429886 0.0006149156 0.6440969 ⋯ 4.863595e-08 -0.011427853 NA 77.02565 0.27070980 1 0 NA -13.377842 3.197872 2018-07-20 23:00:00 2.254428 1.066464e-16 7.137489e-05 2.260404 1.541577 10.09860 0.007342520 0.0006150409 0.3268925 ⋯ 4.166614e-08 -0.008875441 NA 88.32585 0.66714732 0 0 NA -10.389901 1.608121 ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋱ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ 2018-07-22 09:00:00 4.934240 1.360241e-16 -3.029725e-05 4.931280 1.5564115 11.60676 0.008045377 0.0006071581 0.9836290 ⋯ -2.728952e-07 0.1469336287 NA 89.17581 0.65919637 0 0 NA 172.0056191 91.155380 2018-07-22 09:30:00 3.685099 1.311143e-16 -1.743743e-05 3.680715 1.5207279 11.88088 0.007695658 0.0006065192 0.9424085 ⋯ -2.423139e-07 0.1276529904 NA 87.13129 0.22942499 0 0 NA 149.4350329 87.776234 2018-07-22 10:00:00 3.808851 3.501510e-16 -2.815809e-06 3.805463 1.2501465 12.55179 0.007658358 0.0006039184 0.9662970 ⋯ -3.035400e-07 0.1568491952 NA 71.62812 0.04763640 0 0 NA 183.6131263 125.672679 2018-07-22 10:30:00 4.038900 3.412161e-17 -2.187558e-05 4.035977 1.5611167 12.68939 0.007443700 0.0006037819 0.9762103 ⋯ -2.515459e-07 0.1402379720 NA 89.44540 0.44763283 0 0 NA 164.1674503 135.529031 2018-07-22 11:00:00 4.041805 2.169395e-17 -1.737959e-06 4.040701 1.4370347 13.21034 0.007536608 0.0006022697 1.0340207 ⋯ -2.199780e-07 0.1324872047 NA 82.33603 0.09057700 0 0 NA 155.0941324 110.693473 2018-07-22 11:30:00 3.973222 3.013937e-04 -1.008345e-05 3.972104 1.5463529 13.84238 0.007486059 0.0006004164 1.0594391 ⋯ -1.940930e-07 0.1478984398 NA 88.59950 0.69111276 0 0 NA 173.1350605 112.520105 2018-07-22 12:00:00 4.283310 -4.358781e-16 -2.031664e-05 4.281145 1.4904558 14.38656 0.007452259 0.0005988270 1.0369835 ⋯ -2.192808e-07 0.1572654103 NA 85.39683 0.60405517 0 0 NA 184.1003622 144.963821 2018-07-22 12:30:00 3.406857 -4.631435e-18 -2.148455e-05 3.404504 1.6768265 14.31459 0.007368565 0.0005994846 0.9934416 ⋯ -2.036819e-07 0.1356744868 NA 96.07508 0.56222577 0 0 NA 158.8252757 130.511414 2018-07-22 13:00:00 3.510585 2.240778e-16 6.470652e-07 3.508803 1.5042434 14.38106 0.007626521 0.0005990254 1.0042979 ⋯ -2.374995e-07 0.1261090650 NA 86.18680 -0.02081545 1 0 NA 147.6276601 137.495659 2018-07-22 13:30:00 3.968790 8.016486e-17 9.967825e-07 3.967463 1.3624830 14.14629 0.007626520 0.0005989277 0.8834556 ⋯ -1.783447e-07 0.0504325709 NA 78.06452 -0.04307320 0 0 NA 59.0381225 55.629582 2018-07-22 14:00:00 4.956423 2.401986e-17 -1.127752e-05 4.954213 1.3523014 13.89753 0.007715921 0.0005984573 1.0858658 ⋯ -1.849130e-07 0.0659642731 NA 77.48116 0.30163387 0 0 NA 77.2200736 37.169667 2018-07-22 14:30:00 4.536245 3.509249e-16 -1.557156e-05 4.534354 1.4097145 13.57508 0.008061454 0.0005981953 0.9470086 ⋯ -1.976818e-07 0.0596950154 NA 80.77069 0.52446421 0 0 NA 69.8810624 59.113466 2018-07-22 15:00:00 3.323492 1.824209e-16 6.268496e-05 3.319558 1.0041217 13.73304 0.008020425 0.0005967901 0.9860027 ⋯ -2.856360e-07 0.0874115300 NA 57.53193 -1.07062469 0 0 NA 102.3269789 90.497803 2018-07-22 15:30:00 3.426673 9.128458e-18 9.364812e-05 3.421413 0.8924684 13.68513 0.008118645 0.0005968709 1.0725842 ⋯ -2.663410e-07 0.0726323087 NA 51.13467 -1.18453904 0 0 NA 85.0259082 75.815574 2018-07-22 16:00:00 5.038157 6.334020e-17 2.764715e-05 5.033950 1.0795385 13.27879 0.008213574 0.0005985829 1.2008591 ⋯ -1.940414e-07 0.0617238594 NA 61.85300 -0.38713026 0 0 NA 72.2560979 54.747261 2018-07-22 16:30:00 4.645413 -1.371246e-16 1.770146e-05 4.643136 1.1494962 12.92932 0.008076257 0.0005997796 1.0632421 ⋯ -1.491321e-07 0.0425055503 NA 65.86128 -0.47973064 0 0 NA 49.7584764 43.169816 2018-07-22 17:00:00 5.001013 -5.808562e-16 -7.392887e-07 5.000230 1.3124190 12.57927 0.008170141 0.0006010954 1.2517845 ⋯ -1.395839e-07 0.0440654985 NA 75.19607 0.05424580 0 0 NA 51.5846060 51.117089 2018-07-22 17:30:00 4.633404 5.241664e-16 -1.060797e-05 4.630818 1.3701906 12.17168 0.008480251 0.0006024389 0.8424576 ⋯ -8.066659e-08 0.0401371726 NA 78.50614 0.23876210 0 0 NA 46.9859710 22.568161 2018-07-22 18:00:00 4.808849 2.476932e-16 -1.946078e-06 4.808397 1.4466351 11.63522 0.008832184 0.0006047761 1.0330590 ⋯ -2.724699e-08 0.0334611799 NA 82.88609 0.60550086 0 0 NA 39.1708216 20.361893 2018-07-22 18:30:00 4.991756 1.900191e-16 -9.402087e-06 4.989375 1.3828198 11.58462 0.008966201 0.0006071991 0.9245638 ⋯ 4.845547e-08 0.0200961999 NA 79.22974 0.23016275 0 0 NA 23.5253109 15.557606 2018-07-22 19:00:00 4.629573 -1.132581e-16 -1.405561e-06 4.627018 1.3171244 11.39210 0.009011218 0.0006088185 0.8886549 ⋯ 4.470996e-08 0.0067135792 NA 75.46567 0.03152531 1 0 NA 7.8591494 8.669188 2018-07-22 19:30:00 4.336875 -5.562471e-17 3.616091e-07 4.337095 1.2881384 11.43086 0.009037957 0.0006091240 1.1164046 ⋯ 7.632590e-08 0.0109052802 NA 73.80490 0.09186474 0 0 NA 12.7661005 12.068417 2018-07-22 20:00:00 4.289542 1.404781e-17 8.410191e-06 4.289915 1.4539472 11.14092 0.009144167 0.0006096889 0.9880762 ⋯ 8.200592e-08 0.0103035127 NA 83.30504 0.69723069 1 0 NA 12.0616505 12.182950 2018-07-22 20:30:00 4.081792 -2.269024e-16 -6.796915e-06 4.080873 1.3794733 11.16442 0.009021582 0.0006100198 0.8368831 ⋯ 7.528827e-08 0.0015929239 NA 79.03800 0.51751216 2 0 NA 1.8647321 6.685670 2018-07-22 21:00:00 3.133527 4.899518e-17 -1.415750e-05 3.130986 1.3399591 11.06795 0.009055533 0.0006108238 0.6423834 ⋯ 9.266462e-08 0.0022900645 NA 76.77400 0.32570547 1 0 NA 2.6808292 6.693488 2018-07-22 21:30:00 3.295366 -2.060070e-16 -1.353138e-07 3.295063 1.4847268 11.06516 0.009071125 0.0006110649 0.6248660 ⋯ 7.630650e-08 0.0021026626 NA 85.06858 0.76335410 1 0 NA 2.4614500 8.332597 2018-07-22 22:00:00 3.810747 4.310967e-16 3.270931e-06 3.808663 1.3221299 11.15502 0.008972078 0.0006097459 0.8179345 ⋯ 6.964864e-08 0.0002744484 NA 75.75246 -0.09013074 2 0 NA 0.3212788 7.582162 2018-07-22 22:30:00 4.409078 1.620700e-16 -7.665109e-06 4.406794 1.3323178 11.15232 0.008923315 0.0006097643 0.8335655 ⋯ 8.022387e-08 0.0025132864 NA 76.33619 0.19445437 1 0 NA 2.9421405 6.405388 2018-07-22 23:00:00 3.873026 2.977127e-16 -1.294909e-05 3.871143 1.3683514 10.78057 0.008990173 0.0006105977 0.8732912 ⋯ 7.507837e-08 0.0029890703 NA 78.40076 0.41666893 1 0 NA 3.4991097 6.641999 2018-07-22 23:30:00 4.861514 -2.500325e-16 4.084664e-06 4.861716 1.4144546 10.67567 0.008985399 0.0006120489 0.9869727 ⋯ 8.122176e-08 0.0078762013 NA 81.04228 0.54988229 0 0 NA 9.2201553 4.659475 saveRDS(dat,file=&quot;../data/ec-data_30min_processed/processed_data_example.rds&quot;) Note, different sensors may require different correction methods, see also {cite:t}Foken2017. References "],["turbulence-diagnostics.html", "3 Turbulence diagnostics 3.1 Standard turbulence diagnostics and simple timeseries plots 3.2 Stability dependence 3.3 Turbulence regimes", " 3 Turbulence diagnostics After completing the post-processing, we can now move on to looking at some turbulence diagnostics. Based on the generated half-hourly output of the first notebook (01_post-processing.ipynb) some standard turbulence quantities, i.e. stability parameter, friction velocity, TKE, turbulence intensity are calculated and plotted, which allow to study flow properties. #read in processed example data dat=readRDS(&quot;../data/ec-data_30min_processed/processed_data_example.rds&quot;) 3.1 Standard turbulence diagnostics and simple timeseries plots Here, some functions from the Reddy package are used to calculate turbulent kinetic energy \\(TKE\\), velocity scale of TKE \\(V_{TKE}\\), horizontal turbulence intensity \\(TI\\), vertical turbulence intensity \\(I_w\\), friction velocity \\(u_*\\), Obukhov length \\(L\\), stability parameter \\(\\zeta\\) and directional shear angle and plot their timeseries for the previously post-processed example data. Turbulence intensity (calc_ti and calc_iw): Turbulence intensity generally refers to the standard deviation, e.g., \\(\\sigma_u, \\sigma_v, \\sigma_w, \\sigma_T\\), and thus describes the mean fluctuation intensity. The horizontal turbulence intensity TI (calc_ti) and the vertical turbulence intensity \\(I_w\\) (calc_iw) are calculated by normalizing the respective standard deviations with the mean wind speed \\(\\overline{u}\\): \\[TI = \\frac{\\sqrt{\\sigma_u^2+\\sigma_v^2}}{\\overline{u}} ,\\quad\\quad I_w= \\frac{\\sigma_w}{\\overline{u}} \\] Turbulent kinetic energy TKE (calc_tke): TKE describes the mean kinetic energy that the eddies contain and is calculated by \\[ TKE = 0.5 (\\sigma_u^2 + \\sigma_v^2 + \\sigma_w^2) =0.5 (\\overline{u&#39;^2} + \\overline{v&#39;^2} + \\overline{w&#39;^2} ).\\] From the TKE, a velocity scale can easily be derived \\(V_{TKE} = \\sqrt{TKE}\\) (calc_vtke). Friction velocity \\(u_*\\) (calc_ustar): The friction velocity describes the effect of friction in form of a velocity scale \\[ u_* = \\sqrt[4]{\\overline{u&#39;v&#39;}^2+\\overline{v&#39;w&#39;}^2}.\\] Obukhov length \\(L\\) (calc_L): The Obukhov length is a length scale that describes the effect of buoyancy \\[ L = -\\frac{u_*^3 \\overline{T_v}}{\\kappa \\,g\\,\\overline{w&#39;T&#39;}}, \\] which is central in Monin-Obukhov similarity theory (MOST) to derive dimensionless scaling parameter, like the stability parameter \\(\\zeta\\). The fluxes used in the calculation are either the surface fluxes for global scaling or the fluxes at the measurement height for local scaling. Stability parameter \\(\\zeta\\) (calc_zeta): The stability parameter is the ratio of Obukhov length and measurement height and thus a dimensionless measure for stability \\[ \\zeta = \\frac{z}{L}.\\] #calculation of some useful turbulence diagnostics dat$tke=calc_tke(dat$u_sd,dat$v_sd,dat$w_sd) dat$vtke=calc_vtke(dat$u_sd,dat$v_sd,dat$w_sd) dat$ti=calc_ti(dat$u_sd,dat$v_sd,dat$ws_mean) dat$iw=calc_iw(dat$w_sd,dat$ws_mean) dat$ustar=calc_ustar(dat$cov_uw,dat$cov_vw) dat$L=calc_L(dat$ustar,dat$T_mean,dat$cov_wT) dat$zeta=calc_zeta(4.4,dat$L) dat$alpha_uw=calc_dshear(dat$cov_uw,dat$cov_vw) #basic timeseries plots par(mfrow=c(3,3)) plot(dat$T_mean,type=&quot;l&quot;,ylab=&quot;temperature [°C]&quot;) plot(dat$ws_mean,type=&quot;l&quot;,ylab=&quot;wind speed [m/s]&quot;) plot(dat$tke,type=&quot;l&quot;,ylab=TeX(&quot;TKE [$m^2/s^2$]&quot;),ylim=c(0,2)) plot(dat$zeta,type=&quot;l&quot;,ylab=&quot;stability parameter [-]&quot;) abline(h=0,lty=2) plot(dat$ti,type=&quot;l&quot;,ylab=&quot;turbulence intensity [-]&quot;,ylim=c(0,1)) points(dat$iw,type=&quot;l&quot;,col=&quot;gray50&quot;) plot(dat$cov_uw,type=&quot;l&quot;,ylab=TeX(&quot;cov(u,w) [$m^2/s^2$]&quot;)) plot(dat$cov_wT,type=&quot;l&quot;,ylab=TeX(&quot;cov(T,w) [$K m/s$]&quot;)) plot(dat$cov_h2ow,type=&quot;l&quot;,ylab=TeX(&quot;cov(q,w) [$mmol m/s$]&quot;)) plot(dat$cov_co2w,type=&quot;l&quot;,ylab=TeX(&quot;cov(c,w) [$ppm m/s$]&quot;)) 3.2 Stability dependence It is often interesting to investigate the stability dependence of turbulence characteristics, e.g. since Monin-Obukhov similarity theory (MOST) predict all dimensionless turbulence characteristics based on the dimensionless stability parameter. A simple way is to plot stability versus a turbulence characteristic and bin the data based on stability intervals. For this the function binning can be used, which bins one variable based on another for predefined bins, as exemplified below for the dependence of the sensible heat flux on the stability parameter. The output contains mean, median, 25% and 75% quartile per discrete bin as dataframe. The used variables and the bins can be customized. Such type of analysis is usually applied to longer timeseries. zeta_bins=c(-10^(2:-2),10^(-2:2)) sh_binned=binning(dat$sh,dat$zeta,zeta_bins) sh_binned #look at output xbins=c(-5^(2:-1),0,5^(-1:2)) plot(xbins,sh_binned[,2],type=&quot;b&quot;,ylim=c(-20,150),lwd=2,col=2,pch=20,xlab=&quot;stability parameter [-]&quot;,ylab=TeX(&quot;SH [W/m$^2$]&quot;)) points(xbins,sh_binned[,3],type=&quot;l&quot;,lty=2,col=2) points(xbins,sh_binned[,4],type=&quot;l&quot;,lty=2,col=2) #polygon(c(xbins,rev(xbins)),c(sh_binned[,3],rev(sh_binned[,4])),lty=0,col=rgb(0.8,0,0,0.2) ) abline(h=0,lty=2) abline(v=0,lty=2) A matrix: 9 × 4 of type dbl 122.045246 116.804837 109.052920 129.797163 120.620398 125.471467 75.448402 167.986972 17.306097 12.061651 5.647776 24.415438 1.823135 1.864732 1.093005 2.574063 NA NA NA NA -3.564331 -3.564331 -3.564331 -3.564331 -11.192381 -12.213284 -13.937180 -8.561890 -18.102981 -19.201199 -22.358905 -14.674265 -8.655841 -10.389901 -11.853905 -6.324807 Based on our short example data, we can already see that the sensible heat flux is positive under unstable conditions and negative under stable conditions. This can also been seen directly from the definition of \\(\\zeta\\) (and \\(L\\) therein). Such type of analysis can be extended to different quantities and binning based on other important scales, e.g. friction velocity. 3.3 Turbulence regimes The above shown example for stability dependence can be extended to arbitrary variables and is used to characterize different turbulence regimes. To diagnose different turbulence regimes, scatter plots of different turbulence diagnostics can be used. Here are some examples plotting wind speed vs TKE or stability parameter vs TKE. For example, Sun et al. (2012) investigated turbulence regimes in stable boundary layers and distinguish between a weak and strong turbulence (and an intermediate regime). For this, they plot wind speed versus TKE or \\(\\sigma_w\\) and find two different slopes corresponding to different turbulence generation mechanism (local instability versus bulk shear) – this model is now commonly referred to as “Hockey-stick model” (Sun et al. (2012), therein Fig. 2). However, this schematic is very simplified and especially at sites in complex terrain versatile factors (e.g., the footprint) modify it. #some basic plots plot(dat$ws_mean,dat$tke,xlim=c(0,7),ylim=c(0,2.5),xlab=&quot;wind speed [m/s]&quot;,ylab=TeX(&quot;TKE [$m^2/s^2$]&quot;),cex=2,pch=20,col=rgb(0,0,0,0.4)) cond=(dat$ws_mean&gt;4) fit=lm(dat$tke[cond]~dat$ws_mean[cond]) abline(fit,col=2,lty=2) abline(0.1,0.1,col=4,lty=2) References "],["quadrant-analysis.html", "4 Quadrant Analysis 4.1 Calculation of occurrence frequencies and strengths of the four quadrants with calc_quadrant_analysis 4.2 Plotting quadrant analysis with plot_quadrant_analysis 4.3 Literature", " 4 Quadrant Analysis Quadrant analysis is a simple conditional sampling method to detect coherent structures directly from the high-frequency measurements. For this, the Reddy package provides two functions: calc_quadrant_analysis for calculating occurrence frequency and strength of the four quadrants and plot_quadrant_analysis for plotting the two variables as scatter plot with a 2d kernel density estimation and a linear regression. #loading Reddy package install.packages(&quot;../src/Reddy_0.0.0.9000.tar.gz&quot;,repos=NULL,source=TRUE) library(Reddy) #ec data files dir_in=&quot;../data/ec-data_10Hz_raw&quot; files=list.files(dir_in,full.names=TRUE) nf=length(files) Installing package into ‘/home/lauracma/R/x86_64-pc-linux-gnu-library/4.0’ (as ‘lib’ is unspecified) 4.1 Calculation of occurrence frequencies and strengths of the four quadrants with calc_quadrant_analysis The two variables are normalized (if do_normalization = TRUE) through \\[ \\hat{x} = \\frac{x-\\overline{x}}{\\sigma_x}\\] by substracting the mean value \\(\\overline{x}\\) and dividing by \\(\\sigma_x\\) to make different variables with different value ranges comparable and centered around zero. The function counts the occurrence frequency of each quadrant, calculates their strength as product \\(\\hat{x}\\hat{y}\\) and as covariance \\(\\overline{\\hat{x}&#39;\\hat{y}&#39;}\\). The parameter hole_sizescan be used to filter out very strong events by applying the filter conditions \\(\\vert \\hat{x}\\hat{y} \\vert \\le H \\cdot \\vert \\overline{\\hat{x}&#39;\\hat{y}&#39;}\\vert\\). Usually, \\(y\\) is chosen to be the vertical velocity \\(w\\). i=8 #select a file tmp=read.table(files[i],sep=&quot;,&quot;,header=T) qa_Tw=calc_quadrant_analysis(tmp$T_degC,tmp$w_m.s) #based on the raw data (10 Hz) directly (i.e., unrotated) qa_Tw \\(hole_sizes&lt;/dt&gt; &lt;dd&gt;&lt;style&gt; .list-inline {list-style: none; margin:0; padding: 0} .list-inline&gt;li {display: inline-block} .list-inline&gt;li:not(:last-child)::after {content: &quot;\\00b7&quot;; padding: 0 .5ex} &lt;/style&gt; &lt;ol class=list-inline&gt;&lt;li&gt;0&lt;/li&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&lt;li&gt;4&lt;/li&gt;&lt;li&gt;5&lt;/li&gt;&lt;li&gt;6&lt;/li&gt;&lt;li&gt;7&lt;/li&gt;&lt;li&gt;8&lt;/li&gt;&lt;li&gt;9&lt;/li&gt;&lt;li&gt;10&lt;/li&gt;&lt;/ol&gt; &lt;/dd&gt; &lt;dt&gt;\\)occurrence &lt;dd&gt;&lt;table class=&quot;dataframe&quot;&gt; A matrix: 4 × 11 of type int 5448 4689 4232 3829 3542 3355 3214 3120 3071 3043 3017 2975 144 8 1 0 0 0 0 0 0 0 6619 3812 3732 4177 4539 4821 5015 5153 5238 5302 5345 2958 300 71 19 4 1 0 0 0 0 0 \\(product&lt;/dt&gt; &lt;dd&gt;&lt;table class=&quot;dataframe&quot;&gt; &lt;caption&gt;A matrix: 4 × 11 of type dbl&lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt; 1.0680473&lt;/td&gt;&lt;td&gt; 0.8157981&lt;/td&gt;&lt;td&gt; 0.5926998&lt;/td&gt;&lt;td&gt; 0.4160602&lt;/td&gt;&lt;td&gt; 0.2595930&lt;/td&gt;&lt;td&gt; 0.128415&lt;/td&gt;&lt;td&gt;0.00496475&lt;/td&gt;&lt;td&gt;-0.09889583&lt;/td&gt;&lt;td&gt;-0.1580028&lt;/td&gt;&lt;td&gt;-0.1941919&lt;/td&gt;&lt;td&gt;-0.2292195&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;-0.2913532&lt;/td&gt;&lt;td&gt;-1.3388982&lt;/td&gt;&lt;td&gt;-2.3107778&lt;/td&gt;&lt;td&gt;-3.0595706&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt; 0.6190221&lt;/td&gt;&lt;td&gt; 0.3023105&lt;/td&gt;&lt;td&gt; 0.3188273&lt;/td&gt;&lt;td&gt; 0.4780481&lt;/td&gt;&lt;td&gt; 0.6247966&lt;/td&gt;&lt;td&gt; 0.729391&lt;/td&gt;&lt;td&gt;0.81096819&lt;/td&gt;&lt;td&gt; 0.88180372&lt;/td&gt;&lt;td&gt; 0.9271087&lt;/td&gt;&lt;td&gt; 0.9649898&lt;/td&gt;&lt;td&gt; 0.9919303&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;-0.4200449&lt;/td&gt;&lt;td&gt;-1.6791768&lt;/td&gt;&lt;td&gt;-2.7216259&lt;/td&gt;&lt;td&gt;-3.5668925&lt;/td&gt;&lt;td&gt;-4.3541217&lt;/td&gt;&lt;td&gt;-5.200543&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;td&gt; NaN&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/dd&gt; &lt;dt&gt;\\)covariance &lt;dd&gt;&lt;table class=&quot;dataframe&quot;&gt; A matrix: 4 × 11 of type dbl 0.106717873 0.3190217 0.3943558 0.39175959 0.33878042 0.28464356 0.22478907 0.16509696 0.13053088 0.10926006 0.08895242 0.053090898 0.1180140 0.1147860 NA NA NA NA NA NA NA NA -0.009141232 0.2882998 0.1194031 0.04190299 0.05120756 0.06056233 0.06900792 0.07814975 0.08542762 0.09238304 0.09700542 0.032263914 0.1706475 0.2092321 0.09659086 0.05461222 NA NA NA NA NA NA \\(covariance_total&lt;/dt&gt; &lt;dd&gt;0.149572439233721&lt;/dd&gt; &lt;dt&gt;\\)correlation_total &lt;dd&gt;0.433733025048198&lt;/dd&gt; &lt;dt&gt;$meta&lt;/dt&gt; &lt;dd&gt;&#39;Output format: rows represent the quadrants Q1, Q2, Q3, Q4 -- columns: selected hole sizes&#39;&lt;/dd&gt; 4.2 Plotting quadrant analysis with plot_quadrant_analysis plot_quadrant_analysis plots a scatter plot of two variables with a 2d kernel density estimation (MASS::kde2d) and a linear regression (lm()) to allow for a visual inspection. Example: Quadrant Analysis (T,w) during daytime i=8 #select a file -- a daytime example print(files[i]) tmp=read.table(files[i],sep=&quot;,&quot;,header=T) plot_quadrant_analysis(tmp$T_degC,tmp$w_m.s,xlab=&quot;T (normalized)&quot;,ylab=&quot;w (normalized)&quot;,main=&quot;Quadrant Analysis (T,w)&quot;) [1] &quot;../data/ec-data_10Hz_raw/2018-07-20T120000.csv&quot; Call: lm(formula = yval ~ xval) Residuals: Min 1Q Median 3Q Max -4.5818 -0.5491 0.0005 0.5471 4.1136 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -3.849e-16 6.716e-03 0.00 1 xval 4.337e-01 6.716e-03 64.58 &lt;2e-16 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.9011 on 17998 degrees of freedom Multiple R-squared: 0.1881, Adjusted R-squared: 0.1881 F-statistic: 4170 on 1 and 17998 DF, p-value: &lt; 2.2e-16 png Example: Quadrant Analysis (T,w) during nighttime i=38 #select a file -- a nighttime example print(files[i]) tmp=read.table(files[i],sep=&quot;,&quot;,header=T) plot_quadrant_analysis(tmp$T_degC,tmp$w_m.s) #based on the raw data (10 Hz) directly (i.e., unrotated) [1] &quot;../data/ec-data_10Hz_raw/2018-07-21T030000.csv&quot; Call: lm(formula = yval ~ xval) Residuals: Min 1Q Median 3Q Max -5.8334 -0.5262 0.0022 0.5425 6.2520 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -3.006e-17 7.120e-03 0.00 1 xval -2.957e-01 7.121e-03 -41.53 &lt;2e-16 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.9553 on 17998 degrees of freedom Multiple R-squared: 0.08745, Adjusted R-squared: 0.0874 F-statistic: 1725 on 1 and 17998 DF, p-value: &lt; 2.2e-16 png Example: Quadrant Analysis (u,w) during nighttime plot_quadrant_analysis(tmp$u_m.s,tmp$w_m.s) #based on the raw data (10 Hz) directly (i.e., unrotated) Call: lm(formula = yval ~ xval) Residuals: Min 1Q Median 3Q Max -5.9799 -0.5474 -0.0342 0.5301 6.6338 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -3.749e-16 7.326e-03 0.00 1 xval -1.843e-01 7.326e-03 -25.15 &lt;2e-16 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.9829 on 17998 degrees of freedom Multiple R-squared: 0.03395, Adjusted R-squared: 0.0339 F-statistic: 632.5 on 1 and 17998 DF, p-value: &lt; 2.2e-16 png Quadrant analysis can be applied to any combination of two measured quantities and also allows to check the measurement quality or significance of the relation between them. It can also be used to check the effect of the coordinate rotation (e.g., rotate_double) visually. 4.3 Literature Li, D. and Bou-Zeid, E. (2011). Coherent Structures and the Dissimilarity of Turbulent Transport of Momentum and Scalars in the Unstable Atmospheric Surface Layer. Boundary-Layer Meteorol, 140:243–262. Wallace, J. (2016). Quadrant Analysis in Turbulence Research: History and Evolution. Annu Rev Fluid Mech, 48:131–158. "],["spectra.html", "5 Spectra 5.1 Spectral analysis of timeseries 5.2 FFT spectrum and comparison to theoretical spectra 5.3 Multiresolution decomposition (MRD)", " 5 Spectra 5.1 Spectral analysis of timeseries Turbulence is associated with different scales, which interact in a complex manner and to investigate them spectra can be examined. Thereby, the measurements are transformed from time to frequency domain. The most common approach is to represent the timeseries with a series of sine and cosine function (with different frequencies), which is referred to as Fourier analysis. A numerical optimized way to calculate the Fourier transformation is to use Fast Fourier Transform (FFT, in rbase: fft). However, periodicity is not always a suitable assumption, such that other basis functions and approaches might be more applicable. With a wavelet transform information in time and frequency domain is retained and different wavelet basis functions (e.g., Morlet wavelets or Haar-wavelets) allow to represent localized and not periodic behaviour (WaveletComp::wt.image). A very practical discrete wavelet transform is multiresolution decomposition (MRD, Vickers and Mahrt (2003)), which is routinley applied in the analysis of eddy-covariance data (see details below). A related method used for flux calculations from eddy-covariance data based on Ogives, that is a cumulative frequency distribution, i.e. the sum of the cospectral energy. Sievers et al. (2015) developed an Ogive optimization, which allows to disentangle low frequency contributions on flux estimates. This approach is particular relevant under low-flux conditions, e.g. with changing signs in one averaging interval. The low frequency contributions are generally associated with non-local features, e.g. topography, while high-frequency contributions are local. Quick overview: Fast Fourier Transform FFT (rbase: fft, spectrum) Wavelets (WaveletComp::wt.image) Multiresolution decomposition MRD (Reddy::calc_mrd) Ogives (agricolae::ogive.freq) #loading Reddy package install.packages(&quot;../src/Reddy_0.0.0.9000.tar.gz&quot;,repos=NULL,source=TRUE) library(Reddy) #ec data files dir_in=&quot;../data/ec-data_10Hz_raw&quot; files=list.files(dir_in,full.names=TRUE) nf=length(files) i=8 #select a file tmp=read.table(files[i],sep=&quot;,&quot;,header=T) Installing package into ‘/home/lauracma/R/x86_64-pc-linux-gnu-library/4.0’ (as ‘lib’ is unspecified) 5.2 FFT spectrum and comparison to theoretical spectra The rbase function spectrum calculates the spectrum based on FFT and plots by default an associated periodigram. spectrum(tmp$u_m.s) png However, to systematically investigate spectral density and reduce the noise, it is recommended to apply binning (i.e., averaging over frequency intervals), which can be done with the function Reddy::calc_spectrum (as wrapper of spectrum). The resulting averaged spectra can then be compared to theoretical slopes. In homogeneous and isotropic turbulence a spectral slope of -5/3 follows from theoretical considerations (Kolmogorovs energy cascade), which is usually used as visual comparison. Deviations from this -5/3-slope indicate that either more energy (steeper slope) or less energy (weaker slope) is dissipated, which can have various reasons, e.g. turbulence anisotropy or energy injections. spectrum_u = calc_spectrum(tmp$u_m.s) Call: lm(formula = log(sbin[, 2]) ~ bins[2:nbins]) Residuals: Min 1Q Median 3Q Max -2.20343 -0.08638 0.00209 0.21610 1.08777 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -3.9486 0.2669 -14.79 2.23e-16 *** bins[2:nbins] -2.7810 0.1064 -26.15 &lt; 2e-16 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.6212 on 34 degrees of freedom (63 observations deleted due to missingness) Multiple R-squared: 0.9526, Adjusted R-squared: 0.9512 F-statistic: 683.6 on 1 and 34 DF, p-value: &lt; 2.2e-16 png 5.3 Multiresolution decomposition (MRD) Multiresolution decomposition (MRD) is a method to characterize the timescale dependence of variances (spectrum) or covariances (cospectrum) and to find scale gaps between turbulent and submeso-scale motions. It uses Haar wavelets, which have the advantage over Fourier analysis that no periodicity is assumed. 5.3.1 Calculating multiresolution decomposition with calc_mrd #cospectra mrd_uw=calc_mrd(tmp$u_m.s,tmp$w_m.s,time_res=0.1) #momentum flux mrd_Tw=calc_mrd(tmp$T_degC,tmp$w_m.s,time_res=0.1) #sensible heat flux #spectra mrd_ww=calc_mrd(tmp$w_m.s,tmp$w_m.s,time_res=0.1) #vertical veloctiy mrd_TT=calc_mrd(tmp$T_degC,tmp$T_degC,time_res=0.1) #temperature The function returns a dataframe containing index, exponent \\(m\\), scale (i.e. \\(2^{m}\\)), time [s], mean, median, 25% and 75% quartiles as columns. The number of rows is given by \\(M\\) fulfilling $2^M $ #measurements. #look into output mrd_uw A data.frame: 15 × 8 index m scale time mean median q25 q75 &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 14 16384 1638.4 2.009888e-03 6.411861e-05 -5.739598e-03 7.411443e-03 2 13 8192 819.2 3.723193e-03 3.046532e-04 -7.508746e-03 1.040180e-02 3 12 4096 409.6 5.007376e-03 6.024576e-04 -9.401348e-03 1.487008e-02 4 11 2048 204.8 5.831290e-03 6.054180e-04 -9.164119e-03 1.592909e-02 5 10 1024 102.4 9.752098e-03 1.325413e-03 -6.967310e-03 1.938746e-02 6 9 512 51.2 1.090534e-02 2.818075e-03 -4.432612e-03 1.858083e-02 7 8 256 25.6 1.465273e-02 3.577008e-03 -3.271827e-03 2.213298e-02 8 7 128 12.8 1.157982e-02 3.560662e-03 -6.819690e-03 1.801111e-02 9 6 64 6.4 9.264997e-03 5.478194e-04 -8.774036e-03 9.014596e-03 10 5 32 3.2 6.077250e-03 4.486199e-03 -2.698569e-03 9.425087e-03 11 4 16 1.6 4.209757e-03 -5.068024e-04 -4.568223e-03 7.532330e-03 12 3 8 0.8 -3.430667e-03 -4.011748e-03 -6.571402e-03 -8.710123e-04 13 2 4 0.4 -6.626465e-03 -6.626465e-03 -7.390707e-03 -5.862222e-03 14 1 2 0.2 -4.079521e-03 -4.079521e-03 -4.079521e-03 -4.079521e-03 15 0 1 0.1 -8.838739e-34 -8.838739e-34 -8.838739e-34 -8.838739e-34 5.3.2 Plotting multiresolution decomposition with plot_mrd plot_mrd takes an object returned by calc_mrd and plots mean, median and quartiles versus time. plot_mrd(mrd_uw, main=&quot;Cospectrum (u,w)&quot;) png plot_mrd(mrd_Tw, main=&quot;Cospectrum (T,w)&quot;) png plot_mrd(mrd_ww, main=&quot;Spectrum (w,w)&quot;) png plot_mrd(mrd_TT, main=&quot;Spectrum (T,T)&quot;) png Composite MRDs can be created by averaging over several MRDs (also possible to distinguish different flow regimes, e.g., based on the stability parameter calc_zeta) and can be used to find long-term characteristic (e.g., scale gaps). Scale(s) gap(s) are defined as the the zero-crossings of the spectrum or cospectrum (larger than the first zero-crossing at the measurement frequency itself). References "],["flux-footprint.html", "6 Flux Footprint 6.1 2d flux footprint", " 6 Flux Footprint The calculation of a 2d flux footprint makes it possible to estimate the size of the surface that contributes to the measured flux. This also allows to analyze whether changes in the flux result from a change in the footprint (e.g. surface composition, vegetation, surface roughness). Here the flux footprint parametrization according to Kljun et al., 2015 is used. The mathematical idea for deriving a flux footprint parametrization is to express the flux (\\(F_c\\)) as integral over the distribution of its sinks and sources (\\(S_c\\)) times a transfer function \\(f\\) (the flux footprint): \\[ F_c(0,0,z) = \\int\\int S_c(x,y) f(x,y) \\:dx\\,dy \\] By treating streamwise and crosswise velocity independently, the footprint can be expressed as product of the crosswind-integrated footprint (\\(\\overline{f^y}(x)\\) which is then only a function of \\(x\\)) and a function expressing the crosswind dispersion (\\(D_y\\)) through \\[ f(x,y) = \\overline{f^y}(x)D_y. \\] (This assumption leads to a symmtric footprint in crosswind direction.) For further derivations a concrete footprint model has to be applied, which is in Kljun et al., 2015 an advanced Lagrangian particle dispersion model (LPDM-B) based on 3d particle backtracking between surface and boundary layer height \\(h\\) that is valid for steady flows under all stabilities. #load Reddy package install.packages(&quot;../src/Reddy_0.0.0.9000.tar.gz&quot;,repos=NULL,source=TRUE) library(Reddy) kap=function() return(0.4) #read in processed example data dat=readRDS(&quot;../data/ec-data_30min_processed/processed_data_example.rds&quot;) #select file i=8 #daytime example Installing package into ‘/home/lauracma/R/x86_64-pc-linux-gnu-library/4.0’ (as ‘lib’ is unspecified) 6.1 2d flux footprint 6.1.1 Calculate 2d flux footprint estimate with calc_flux_footprint The function calc_flux_footprintuses the 2d flux footprint parametrization (FFP) according to Kljun et al., 2015 to calculate the footprint based on measurement height zm, mean horizontal wind speed u_mean, boundary layer height h, Obukhov length L (calc_L), standard deviation of cross-wind component v_sd and either friction velocity ustar(calc_ustar) or surface roughness length z0 in a resolution given by nres. The boundary layer height can be taken from e.g. ERA5. ustar=calc_ustar(dat$cov_uw,dat$cov_vw) L=calc_L(ustar,dat$T_mean,dat$cov_wT) zm=4.4 h=700 ffp=calc_flux_footprint(zm,dat$u_mean[i],h,L[i],dat$v_sd[i],ustar[i]) str(ffp) List of 9 $ xmax : num 23 $ x : num [1:999] 4.38 5.17 5.96 6.76 7.55 ... $ fy_mean : num [1:999] 3.43e-20 3.60e-10 5.56e-07 1.85e-05 1.37e-04 ... $ x2d : num [1:1499, 1:999] 4.38 4.38 4.38 4.38 4.38 ... $ y2d : num [1:1499, 1:999] -592 -591 -590 -589 -589 ... $ f2d : num [1:999, 1:1499] 0 0 0 0 0 0 0 0 0 0 ... $ xcontour :List of 9 ..$ : num [1:1573] 6.76 6.75 6.72 6.7 6.69 ... ..$ : num [1:815] 7.55 7.48 7.42 7.38 7.35 ... ..$ : num [1:543] 8.34 8.25 8.16 8.08 8.03 ... ..$ : num [1:397] 9.13 9.03 8.91 8.81 8.73 ... ..$ : num [1:307] 9.92 9.78 9.64 9.52 9.43 ... ..$ : num [1:235] 10.7 10.7 10.5 10.3 10.2 ... ..$ : num [1:181] 11.5 11.3 11.2 11 11 ... ..$ : num [1:133] 12.3 12.2 12.1 12 12 ... ..$ : num [1:87] 13.9 13.8 13.7 13.7 13.7 ... $ ycontour :List of 9 ..$ : num [1:1573] -2.39 -2.37 -1.58 -0.79 0 ... ..$ : num [1:815] -4.56 -3.95 -3.16 -2.37 -1.58 ... ..$ : num [1:543] -6.14 -5.53 -4.74 -3.95 -3.16 ... ..$ : num [1:397] -6.85 -6.32 -5.53 -4.74 -3.95 ... ..$ : num [1:307] -6.95 -6.32 -5.53 -4.74 -3.95 ... ..$ : num [1:235] -6.48 -6.32 -5.53 -4.74 -3.95 ... ..$ : num [1:181] -5.45 -4.74 -3.95 -3.16 -2.37 ... ..$ : num [1:133] -3.37 -3.16 -2.37 -1.58 -0.79 ... ..$ : num [1:87] -1.91 -1.58 -0.79 0 0.79 ... $ contour_levels: num [1:9] 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 6.1.2 Plotting of flux footprint with plot_flux_footprint The function plot_flux_footprint takes as input an obeject returned by calc_flux_footprint and plots the cross-wind integrated footprint and the 2d footprint. plot_flux_footprint(ffp) png png Footprint climatologies can be create as composite footprints by averaging over several FFP calculations. 6.1.3 Literature Kljun, N., Calanca, P., Rotach, M. W., and Schmid, H. P.: A Simple Two-Dimensional Parameterisation for Flux Footprint Prediction (FFP), Geoscientific Model Development, 8, 3695–3713, https://doi.org/10.5194/gmd-8-3695-2015, 2015. Pirk, N., Aalstad, K., Yilmaz, Y. A., Vatne, A., Popp, A. L., Horvath, P., Bryn, A., Vollsnes, A. V., Westermann, S., Berntsen, T. K., Stordal, F., and Tallaksen, L. M. (2023). Snow-vegetation-atmosphere interactions in alpine tundra. Biogeosciences, 20:2031–2047. "],["reynolds-stress-tensor.html", "7 Reynolds stress tensor 7.1 Invariant analysis of the Reynolds stress tensor 7.2 Anisotropy and velocity aspect ratio (VAR) 7.3 Literature", " 7 Reynolds stress tensor The Reynolds stress tensor \\[ R := \\overline{u_i &#39; u_j &#39;} = \\begin{pmatrix} u&#39;^2 &amp; \\overline{u&#39;v&#39;} &amp; \\overline{u&#39;w&#39;} \\\\ \\overline{v&#39;u&#39;} &amp; v&#39;^2 &amp; \\overline{v&#39;w&#39;} \\\\ \\overline{w&#39;u&#39;} &amp; \\overline{w&#39;v&#39;} &amp; w&#39;^2 \\end{pmatrix}, \\quad \\textrm{with} \\quad R = R^T\\] summarizes all normal and shear stresses. Based on an invariant analysis, the most important geometric properties can be derived from its eigenvalues and eigenvectors. Using a linear combination of the three eigenvalues, a two-dimensional mapping into an equilateral triangle – called barycentric map – with the coordinates \\((x_B,y_B)\\), can be constructed, which allows to characterize the anisotropy (\\(y_B\\)) and the limiting states. #loading Reddy package install.packages(&quot;../src/Reddy_0.0.0.9000.tar.gz&quot;,repos=NULL,source=TRUE) library(Reddy) #read in processed example data dat=readRDS(&quot;../data/ec-data_30min_processed/processed_data_example.rds&quot;) Installing package into ‘/home/lauracma/R/x86_64-pc-linux-gnu-library/4.0’ (as ‘lib’ is unspecified) 7.1 Invariant analysis of the Reynolds stress tensor 7.1.1 Performing the invariant analysis of the Reynolds stress tensor with calc_anisotropy The function calc_anisotropy calculates the invariant analysis and takes for this vectors for all six independent components of the Reynolds stress tensor as input (since it is symmetric there are only six not nine independent entries) in the form \\[ R = \\begin{pmatrix} a_{11} &amp; a_{12} &amp; a_{13}\\\\ a_{12} &amp; a_{22} &amp; a_{23} \\\\ a_{13} &amp; a_{23} &amp; a_{33} \\end{pmatrix} \\] and in the order \\(a_{11}, a_{12}, a_{13}, a_{22}, a_{23}, a_{33}\\). rey_ana = calc_anisotropy(dat$u_sd^2,dat$cov_uv,dat$cov_uw,dat$v_sd^2,dat$cov_vw,dat$w_sd^2) str(rey_ana) List of 6 $ xb : num [1:127] 0.348 0.249 0.326 0.257 0.188 ... $ yb : num [1:127] 0.119 0.124 0.101 0.103 0.117 ... $ eta : num [1:127] 0.165 0.152 0.166 0.157 0.148 ... $ xi : num [1:127] -0.0562 -0.1214 -0.0821 -0.1202 -0.1353 ... $ eigenvalues : num [1:127, 1:3] 0.283 0.232 0.281 0.245 0.204 ... $ eigenvectors: num [1:127, 1:3, 1:3] 0.89759 0.93931 0.86082 0.00664 -0.64731 ... The output contains the coordinates of the barycentric map (xb, yb) and of the Lumley triangle (eta, xi) as well as all eigenvalues and eigenvectors. 7.1.2 Plotting the barycentric map using plot_barycentric_map The function plot_barycentric_map takes xb, yb as input (as calculated in the invariant analysis before) and plots them in the barycentric map. plot_barycentric_map(rey_ana$xb,rey_ana$yb) png The three corners of the tringle represent the three limiting state: 3-component limit (isotropic, “sphere-like”) at \\((0.5,\\sqrt{3}/2\\)), 2-component limit (“disk-like”) at \\((0,0)\\) and 1-component limit (“rod-like”) at \\((1,0)\\). \\(y_B\\) is a measure for anisotropy (from \\(y_B = 0\\) completely anisotropic to \\(y_B = \\sqrt(3)/2\\) perfectly isotropic. 7.2 Anisotropy and velocity aspect ratio (VAR) The velocity aspect ratio VAR (calc_var) is an approximation of anisotropy that only takes the diagonal elements of the Reynolds stress tensor, i.e., \\(\\sigma_u, \\sigma_v,\\sigma_w\\), into account. A deviation from a linear regression between VAR and \\(y_B\\) allows quantify the effect of shear stresses. As seen in the plot below, for small values of \\(y_B\\), i.e., very anisotropic, is the deviation from the linear fit larger than for higher values of \\(y_B\\). var=calc_var(dat$u_sd,dat$v_sd,dat$w_sd) plot(var,rey_ana$yb,col=rgb(0,0,0,0.5),pch=20,cex=2,xlab=&quot;VAR&quot;,ylab=&quot;yb&quot;) grid() fit=lm(rey_ana$yb~var) abline(fit,lwd=2,col=2) print(summary(fit)) Call: lm(formula = rey_ana$yb ~ var) Residuals: Min 1Q Median 3Q Max -0.011421 -0.003373 -0.001110 0.003227 0.021316 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -0.08683 0.00265 -32.77 &lt;2e-16 *** var 0.64442 0.00660 97.64 &lt;2e-16 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.005629 on 125 degrees of freedom Multiple R-squared: 0.9871, Adjusted R-squared: 0.987 F-statistic: 9534 on 1 and 125 DF, p-value: &lt; 2.2e-16 png 7.3 Literature Banerjee, S., Krahl, R., Durst, F., and Zenger, C. (2007). Presentation of anisotropy properties of turbulence, invariants versus eigenvalue approaches. J Turb, 8(N32). "],["surface-energy-balance-seb.html", "8 Surface energy balance (SEB) 8.1 Background 8.2 Calculating surface energy balance 8.3 Bowen ratio and evaporative fraction 8.4 Clear-Sky-Index (CSI) for contextualization (calc_csi) 8.5 Literature", " 8 Surface energy balance (SEB) 8.1 Background The surface energy balance (SEB) is a framework to describe exchange processes between atmosphere and land and can be written as \\[ R_{net} - G = SH + LH + I_{SEB} \\] with net radiation \\(R_{net} = SW\\downarrow - SW\\uparrow + LW\\downarrow - LW\\uparrow\\) (combining shortwave (SW) and longwave (LW), incoming (\\(\\downarrow\\)) and outgoing (\\(\\uparrow\\)) radiative fluxes) and the ground heat flux \\(G\\). The turbulent fluxes are given by \\[\\begin{align} SH = \\rho c_p \\overline{w&#39;T&#39;} \\quad \\textrm{ and } \\quad LH = \\rho L_v \\overline{w&#39;q&#39;} \\end{align}\\] with the air density \\(\\rho\\), the heat capacity of air (under constant pressure) \\(c_p\\) and the latent heat of vaporization \\(L_v\\). Positive latent heat fluxes (LH) represent evaporation or transpiration, whereas negative LH indicates condensation or deposition of water (vapor). The last term \\(I_{SEB}\\) describes the imbalance (or residual flux). Depending on the value of \\(I_{SEB}\\), the SEB is called closed or unclosed \\[\\begin{align} I_{SEB} \\begin{cases} = 0 \\rightarrow \\textrm{closed} \\\\ \\ne 0 \\rightarrow \\textrm{unclosed} \\end{cases} \\quad \\textrm{and} \\quad CR := \\frac{R_{net}-G}{SH+LH} \\begin{cases} = 1 \\rightarrow \\textrm{closed} \\\\ \\ne 1 \\rightarrow \\textrm{unclosed}, \\end{cases} \\end{align}\\] which can also be expressed in a relative measure, the closure ratio CR. The advantage of the closure ratio is the normalization by the available radiation, but the disadvantage is a cancellation of biases. Wilson et al., 2002 showed based on the FLUXNET towers, that there is on average a SEB unclosure of 20-30 %. Reasons for the unclosure are (similar to the TKE budget unclosure) horizontal advection, flux divergence, submeso-scale motions, different measurement footprints, melting, runoff or rain fluxes, canopy interactions as well as possible measurement and post-processing errors (as in great detail reviewed by Mauder et al., 2020). Notably, Stoy et al., 2013 found a larger unclosure in heterogeneous terrain and a correlation with friction velocity. 8.2 Calculating surface energy balance #loading Reddy package install.packages(&quot;../src/Reddy_0.0.0.9000.tar.gz&quot;,repos=NULL,source=TRUE) library(Reddy) library(dplyr) sigma=5.67*10^(-8) #read in processed example data dat=readRDS(&quot;../data/ec-data_30min_processed/processed_data_example.rds&quot;) dat$TIME=as.POSIXct(dat$time,format=&quot;%F %T&quot;) Installing package into ‘/home/lauracma/R/x86_64-pc-linux-gnu-library/4.0’ (as ‘lib’ is unspecified) Attaching package: ‘dplyr’ The following objects are masked from ‘package:stats’: filter, lag The following objects are masked from ‘package:base’: intersect, setdiff, setequal, union Plotting of surface energy balance with plot_seb The function plot_sebplots the surface energy balance as time series and as scatter plot (R-GH, SH+LH) with linear regression as well as calculates the residual flux and the closure ratio. #read in radiation data dat_rad=read.table(&quot;../data//radiation-data_30min//biomet_data.csv&quot;,sep=&quot;,&quot;,header=T) colnames(dat_rad)=c(&quot;time&quot;,&quot;rh&quot;,&quot;ta&quot;,&quot;swin&quot;,&quot;swout&quot;,&quot;lwin&quot;,&quot;lwout&quot;,&quot;shf1&quot;,&quot;shf2&quot;) dat_rad$TIME=as.POSIXct(dat_rad$time,format=&quot;%F %T&quot;) dat=inner_join(dat,dat_rad,by=&quot;TIME&quot;) dat A data.frame: 127 × 40 time.x u_mean v_mean w_mean ws_mean wd_mean T_mean h2o_mean co2_mean u_sd ⋯ TIME time.y rh ta swin swout lwin lwout shf1 shf2 &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ⋯ &lt;dttm&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 2018-07-20 08:30:00 2.872084 -3.939352e-16 6.931732e-06 2.873170 -2.289284 15.86938 0.007254132 0.0006009614 1.0621428 ⋯ 2018-07-20 08:30:00 2018-07-20 08:30:00 56.54792 16.287746 715.440996 105.7313682 312.4243 458.7009 21.596913 1.68270551 2018-07-20 09:00:00 2.864793 7.504684e-17 9.052527e-08 2.864538 -2.326045 16.55190 0.007584267 0.0005978138 1.1051216 ⋯ 2018-07-20 09:00:00 2018-07-20 09:00:00 54.34070 16.774326 756.265817 109.9171071 319.3567 460.9099 26.812897 1.95237364 2018-07-20 09:30:00 3.996526 9.365292e-16 3.049021e-05 4.002522 -2.035397 17.05704 0.007472065 0.0005954894 1.4094952 ⋯ 2018-07-20 09:30:00 2018-07-20 09:30:00 47.65451 17.402094 797.975058 112.8785627 301.3082 463.2456 30.599971 2.13950728 2018-07-20 10:00:00 4.998016 -2.812846e-16 -2.391239e-06 4.997530 -1.977737 17.60447 0.006762097 0.0005953881 1.2893259 ⋯ 2018-07-20 10:00:00 2018-07-20 10:00:00 36.98989 18.087188 809.704785 114.7405553 295.6089 467.7517 33.011363 2.27006715 2018-07-20 10:30:00 4.879095 4.062636e-16 2.187117e-05 4.880696 -2.014489 18.08994 0.005410862 0.0005948927 1.4699485 ⋯ 2018-07-20 10:30:00 2018-07-20 10:30:00 30.13753 18.327501 823.015033 117.3849189 291.3130 469.1732 34.708690 2.29979151 2018-07-20 11:00:00 5.225037 -8.977916e-17 -6.972624e-06 5.223984 -2.261205 18.24207 0.004422858 0.0005954766 1.3192267 ⋯ 2018-07-20 11:00:00 2018-07-20 11:00:00 25.45414 18.608874 827.858750 118.4659019 288.2217 467.7229 34.789179 2.28431539 2018-07-20 11:30:00 5.896774 -7.481298e-16 -4.307951e-05 5.893156 -2.141157 18.50137 0.003765156 0.0005955767 1.4571181 ⋯ 2018-07-20 11:30:00 2018-07-20 11:30:00 23.37856 18.701896 825.984820 119.8238286 286.5863 471.7829 32.797710 2.20964982 2018-07-20 12:00:00 5.211296 -3.062741e-16 -1.461607e-05 5.209715 -2.253118 18.57772 0.003418867 0.0005955199 1.2629639 ⋯ 2018-07-20 12:00:00 2018-07-20 12:00:00 23.45499 18.964067 808.988981 118.7011108 289.1710 475.5844 33.287449 2.21530101 2018-07-20 12:30:00 4.295926 -7.486225e-16 -1.727795e-06 4.295548 -2.194560 18.80679 0.003522845 0.0005946848 1.3898230 ⋯ 2018-07-20 12:30:00 2018-07-20 12:30:00 22.08109 18.980666 786.158806 116.7579311 289.2690 474.9449 33.313854 2.27206972 2018-07-20 13:00:00 3.973616 -4.304496e-16 -1.026732e-05 3.972403 -2.117721 18.78832 0.003276191 0.0005946895 1.4404999 ⋯ 2018-07-20 13:00:00 2018-07-20 13:00:00 40.75998 18.192037 744.184577 112.5108631 294.7875 468.6817 32.891724 2.25229413 2018-07-20 13:30:00 1.520355 2.799239e-16 5.320330e-05 1.527719 1.749457 18.20841 0.005748607 0.0005944343 3.1235024 ⋯ 2018-07-20 13:30:00 2018-07-20 13:30:00 69.02386 15.679193 699.163547 106.7489650 293.6522 440.7707 32.742644 2.21891383 2018-07-20 14:00:00 6.940662 5.646526e-16 -2.889014e-05 6.936159 1.375615 16.21080 0.008946908 0.0005954275 1.4076910 ⋯ 2018-07-20 14:00:00 2018-07-20 14:00:00 70.60011 15.277481 651.490922 102.6448973 293.9126 434.8210 29.724340 2.02997061 2018-07-20 14:30:00 6.416896 1.098171e-16 -2.196289e-05 6.414141 1.392954 15.81382 0.008976061 0.0005949455 1.2086952 ⋯ 2018-07-20 14:30:00 2018-07-20 14:30:00 69.75832 14.979039 596.823318 96.7918734 292.1311 427.8283 26.428709 1.79289730 2018-07-20 15:00:00 6.321222 -3.078589e-16 -2.444517e-05 6.318381 1.480618 15.43666 0.008717666 0.0005955538 1.0829833 ⋯ 2018-07-20 15:00:00 2018-07-20 15:00:00 69.24807 14.917685 533.475102 89.6685125 291.0622 421.9537 23.159786 1.53753451 2018-07-20 15:30:00 6.043490 -3.591949e-16 -2.272359e-05 6.041072 1.537172 15.27256 0.008609773 0.0005955597 1.0474320 ⋯ 2018-07-20 15:30:00 2018-07-20 15:30:00 69.75511 14.743942 467.056009 81.7080051 290.8413 414.8160 19.733705 1.27668161 2018-07-20 16:00:00 5.939518 -1.692595e-16 -1.849441e-05 5.937431 1.496256 15.13815 0.008618070 0.0005955722 0.9961572 ⋯ 2018-07-20 16:00:00 2018-07-20 16:00:00 69.50647 14.628890 396.820357 72.4606567 290.2111 408.4422 16.194751 1.01949007 2018-07-20 16:30:00 5.306554 2.974929e-16 -3.094122e-05 5.303926 1.505930 14.99383 0.008512352 0.0005958945 0.9426203 ⋯ 2018-07-20 16:30:00 2018-07-20 16:30:00 69.67755 14.305179 331.906592 62.9796256 289.2341 400.2791 12.804425 0.78081546 2018-07-20 17:00:00 5.520015 4.660902e-17 -1.371344e-05 5.518476 1.527105 14.66441 0.008393601 0.0005971210 0.9157507 ⋯ 2018-07-20 17:00:00 2018-07-20 17:00:00 70.61447 13.860416 263.602710 52.4818885 287.8685 391.7396 9.530537 0.54646855 2018-07-20 17:30:00 5.772783 5.944122e-16 -2.376498e-05 5.770532 1.526367 14.23050 0.008291716 0.0005985217 1.0008122 ⋯ 2018-07-20 17:30:00 2018-07-20 17:30:00 71.86140 13.363090 196.877643 41.5515916 286.6405 384.1213 6.292702 0.32729566 2018-07-20 18:00:00 5.858808 4.427743e-16 -2.452174e-05 5.855744 1.474368 13.76722 0.008188837 0.0006000559 0.9311757 ⋯ 2018-07-20 18:00:00 2018-07-20 18:00:00 73.48679 12.999167 135.981437 30.2398200 284.9890 377.9235 3.414831 0.14647861 2018-07-20 18:30:00 4.726868 -3.629108e-16 -2.609463e-05 4.724053 1.443867 13.42414 0.008213861 0.0006007363 0.8119707 ⋯ 2018-07-20 18:30:00 2018-07-20 18:30:00 74.23303 12.501861 81.205472 18.2083429 283.2902 371.5591 1.077318 0.00798431 2018-07-20 19:00:00 5.235747 -4.403414e-16 -2.374174e-05 5.232331 1.446531 12.95281 0.008061974 0.0006026033 0.8973074 ⋯ 2018-07-20 19:00:00 2018-07-20 19:00:00 75.80791 11.628917 14.621718 1.2346091 280.8733 364.3054 -1.143438 -0.11161499 2018-07-20 19:30:00 4.888416 -5.150101e-16 -1.013674e-05 4.887055 1.424478 12.26218 0.007800124 0.0006059566 0.8556428 ⋯ 2018-07-20 19:30:00 2018-07-20 19:30:00 77.50602 11.027768 3.225327 0.1109875 280.3105 360.1383 -3.111361 -0.22294195 2018-07-20 20:00:00 4.186600 2.900506e-16 -1.165991e-05 4.184779 1.268382 11.69501 0.007702318 0.0006083613 0.8672731 ⋯ 2018-07-20 20:00:00 2018-07-20 20:00:00 78.69435 10.408159 -3.435953 -0.7020956 278.5732 355.6418 -4.715136 -0.31354934 2018-07-20 20:30:00 3.551020 -2.893889e-16 -1.814533e-06 3.555726 1.195096 11.06218 0.007535550 0.0006109579 1.0888968 ⋯ 2018-07-20 20:30:00 2018-07-20 20:30:00 80.31497 9.862182 -5.165882 -0.8767595 277.2647 352.3304 -6.105991 -0.39140072 2018-07-20 21:00:00 3.181178 2.700118e-16 8.888365e-09 3.181144 1.108919 10.56345 0.007438288 0.0006128597 0.7279405 ⋯ 2018-07-20 21:00:00 2018-07-20 21:00:00 80.31090 9.984645 -5.461369 -0.8820022 277.2669 352.6561 -7.185792 -0.45060081 2018-07-20 21:30:00 3.433915 -3.167000e-16 6.880287e-06 3.431664 1.203063 10.68381 0.007496276 0.0006119426 0.7405834 ⋯ 2018-07-20 21:30:00 2018-07-20 21:30:00 80.95023 9.899112 -5.528885 -0.9663635 276.6767 351.4747 -7.863830 -0.48653334 2018-07-20 22:00:00 3.274341 -2.888448e-16 1.778441e-05 3.275246 1.495703 10.65175 0.007511255 0.0006121003 0.8838687 ⋯ 2018-07-20 22:00:00 2018-07-20 22:00:00 82.46217 9.366036 -5.736465 -1.1078621 275.0607 348.4725 -8.313226 -0.51132915 2018-07-20 22:30:00 2.803897 -2.616895e-16 1.775305e-05 2.807623 1.344351 10.09577 0.007429886 0.0006149156 0.6440969 ⋯ 2018-07-20 22:30:00 2018-07-20 22:30:00 82.58667 9.190341 -5.510834 -1.2503448 275.6229 344.3904 -8.846591 -0.54142068 2018-07-20 23:00:00 2.254428 1.066464e-16 7.137489e-05 2.260404 1.541577 10.09860 0.007342520 0.0006150409 0.3268925 ⋯ 2018-07-20 23:00:00 2018-07-20 23:00:00 85.52940 8.636959 -5.505866 -1.2369807 274.7808 341.3786 -9.479416 -0.57556368 ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋱ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ 2018-07-22 09:00:00 4.934240 1.360241e-16 -3.029725e-05 4.931280 1.5564115 11.60676 0.008045377 0.0006071581 0.9836290 ⋯ 2018-07-22 09:00:00 2018-07-22 09:00:00 73.47144 11.800853 724.5980889 105.2937216 281.6859 441.1556 26.0087716 1.85320419 2018-07-22 09:30:00 3.685099 1.311143e-16 -1.743743e-05 3.680715 1.5207279 11.88088 0.007695658 0.0006065192 0.9424085 ⋯ 2018-07-22 09:30:00 2018-07-22 09:30:00 71.28743 12.226840 778.7789753 112.6008561 278.8753 447.3730 30.7126106 2.09488911 2018-07-22 10:00:00 3.808851 3.501510e-16 -2.815809e-06 3.805463 1.2501465 12.55179 0.007658358 0.0006039184 0.9662970 ⋯ 2018-07-22 10:00:00 2018-07-22 10:00:00 67.99737 12.630713 802.6623697 115.1173697 280.7495 452.1891 35.3149791 2.31647945 2018-07-22 10:30:00 4.038900 3.412161e-17 -2.187558e-05 4.035977 1.5611167 12.68939 0.007443700 0.0006037819 0.9762103 ⋯ 2018-07-22 10:30:00 2018-07-22 10:30:00 67.29326 12.999613 812.7032081 116.8327297 284.3418 456.0413 39.0046380 2.46248203 2018-07-22 11:00:00 4.041805 2.169395e-17 -1.737959e-06 4.040701 1.4370347 13.21034 0.007536608 0.0006022697 1.0340207 ⋯ 2018-07-22 11:00:00 2018-07-22 11:00:00 64.49426 13.629612 816.4932517 117.1933922 288.6287 459.6249 41.4884882 2.62148719 2018-07-22 11:30:00 3.973222 3.013937e-04 -1.008345e-05 3.972104 1.5463529 13.84238 0.007486059 0.0006004164 1.0594391 ⋯ 2018-07-22 11:30:00 2018-07-22 11:30:00 62.44441 14.083781 803.0877611 115.4194014 293.1299 459.2340 41.0127842 2.66727071 2018-07-22 12:00:00 4.283310 -4.358781e-16 -2.031664e-05 4.281145 1.4904558 14.38656 0.007452259 0.0005988270 1.0369835 ⋯ 2018-07-22 12:00:00 2018-07-22 12:00:00 61.25006 14.266369 826.1959328 121.8169753 299.2473 466.6503 41.9634929 2.67476665 2018-07-22 12:30:00 3.406857 -4.631435e-18 -2.148455e-05 3.404504 1.6768265 14.31459 0.007368565 0.0005994846 0.9934416 ⋯ 2018-07-22 12:30:00 2018-07-22 12:30:00 63.07453 14.251666 575.1487336 84.2359873 342.3214 447.9525 42.3663689 2.74610029 2018-07-22 13:00:00 3.510585 2.240778e-16 6.470652e-07 3.508803 1.5042434 14.38106 0.007626521 0.0005990254 1.0042979 ⋯ 2018-07-22 13:00:00 2018-07-22 13:00:00 64.76986 13.753475 291.0803775 41.7587385 363.5722 413.8814 34.3796093 2.22944757 2018-07-22 13:30:00 3.968790 8.016486e-17 9.967825e-07 3.967463 1.3624830 14.14629 0.007626520 0.0005989277 0.8834556 ⋯ 2018-07-22 13:30:00 2018-07-22 13:30:00 67.18922 13.499187 355.5947236 50.9179427 358.3056 413.6674 24.8391435 1.59710912 2018-07-22 14:00:00 4.956423 2.401986e-17 -1.127752e-05 4.954213 1.3523014 13.89753 0.007715921 0.0005984573 1.0858658 ⋯ 2018-07-22 14:00:00 2018-07-22 14:00:00 71.09621 13.114535 268.1936881 40.2644327 362.2115 405.1024 19.8422589 1.27905368 2018-07-22 14:30:00 4.536245 3.509249e-16 -1.557156e-05 4.534354 1.4097145 13.57508 0.008061454 0.0005981953 0.9470086 ⋯ 2018-07-22 14:30:00 2018-07-22 14:30:00 70.24901 13.274465 469.4131083 71.0368865 359.0782 428.4304 17.3907642 1.13038318 2018-07-22 15:00:00 3.323492 1.824209e-16 6.268496e-05 3.319558 1.0041217 13.73304 0.008020425 0.0005967901 0.9860027 ⋯ 2018-07-22 15:00:00 2018-07-22 15:00:00 71.69318 13.102969 361.7632944 54.1563921 359.2340 418.4712 19.0337477 1.21875041 2018-07-22 15:30:00 3.426673 9.128458e-18 9.364812e-05 3.421413 0.8924684 13.68513 0.008118645 0.0005968709 1.0725842 ⋯ 2018-07-22 15:30:00 2018-07-22 15:30:00 74.12796 12.692815 247.2419244 35.3603529 353.9462 401.1495 18.1898245 1.12739175 2018-07-22 16:00:00 5.038157 6.334020e-17 2.764715e-05 5.033950 1.0795385 13.27879 0.008213574 0.0005985829 1.2008591 ⋯ 2018-07-22 16:00:00 2018-07-22 16:00:00 74.58073 12.329000 206.2971900 30.8636789 350.3054 394.7730 14.6199254 0.88547474 2018-07-22 16:30:00 4.645413 -1.371246e-16 1.770146e-05 4.643136 1.1494962 12.92932 0.008076257 0.0005997796 1.0632421 ⋯ 2018-07-22 16:30:00 2018-07-22 16:30:00 76.97184 11.995712 158.7164761 22.5158479 360.5109 390.4620 11.2344333 0.67440282 2018-07-22 17:00:00 5.001013 -5.808562e-16 -7.392887e-07 5.000230 1.3124190 12.57927 0.008170141 0.0006010954 1.2517845 ⋯ 2018-07-22 17:00:00 2018-07-22 17:00:00 81.66650 11.545497 142.7505203 20.8977504 358.4214 387.3248 8.5893554 0.51464302 2018-07-22 17:30:00 4.633404 5.241664e-16 -1.060797e-05 4.630818 1.3701906 12.17168 0.008480251 0.0006024389 0.8424576 ⋯ 2018-07-22 17:30:00 2018-07-22 17:30:00 87.68808 10.959103 71.4838572 9.8095084 360.2802 379.7527 6.5507655 0.39792627 2018-07-22 18:00:00 4.808849 2.476932e-16 -1.946078e-06 4.808397 1.4466351 11.63522 0.008832184 0.0006047761 1.0330590 ⋯ 2018-07-22 18:00:00 2018-07-22 18:00:00 89.83680 10.794161 33.5343380 4.2778003 360.6886 375.1643 4.2712902 0.25985662 2018-07-22 18:30:00 4.991756 1.900191e-16 -9.402087e-06 4.989375 1.3828198 11.58462 0.008966201 0.0006071991 0.9245638 ⋯ 2018-07-22 18:30:00 2018-07-22 18:30:00 91.46456 10.568312 16.7348484 2.1456810 358.9860 371.0724 2.1186240 0.12964283 2018-07-22 19:00:00 4.629573 -1.132581e-16 -1.405561e-06 4.627018 1.3171244 11.39210 0.009011218 0.0006088185 0.8886549 ⋯ 2018-07-22 19:00:00 2018-07-22 19:00:00 91.49128 10.610715 7.6333004 0.8788638 361.1351 370.5634 0.5416284 0.03735248 2018-07-22 19:30:00 4.336875 -5.562471e-17 3.616091e-07 4.337095 1.2881384 11.43086 0.009037957 0.0006091240 1.1164046 ⋯ 2018-07-22 19:30:00 2018-07-22 19:30:00 93.96748 10.327982 0.7027518 -0.5927231 360.2647 368.6318 -0.5777315 -0.02634839 2018-07-22 20:00:00 4.289542 1.404781e-17 8.410191e-06 4.289915 1.4539472 11.14092 0.009144167 0.0006096889 0.9880762 ⋯ 2018-07-22 20:00:00 2018-07-22 20:00:00 92.80670 10.337468 -2.6767950 -0.5586888 348.0100 366.4745 -1.4711631 -0.07921458 2018-07-22 20:30:00 4.081792 -2.269024e-16 -6.796915e-06 4.080873 1.3794733 11.16442 0.009021582 0.0006100198 0.8368831 ⋯ 2018-07-22 20:30:00 2018-07-22 20:30:00 93.53062 10.264150 -3.0409925 -0.9129252 354.5612 366.7564 -2.3449861 -0.13137463 2018-07-22 21:00:00 3.133527 4.899518e-17 -1.415750e-05 3.130986 1.3399591 11.06795 0.009055533 0.0006108238 0.6423834 ⋯ 2018-07-22 21:00:00 2018-07-22 21:00:00 93.94708 10.236819 -3.3395351 -0.7380014 359.2003 366.9745 -2.7607782 -0.15467819 2018-07-22 21:30:00 3.295366 -2.060070e-16 -1.353138e-07 3.295063 1.4847268 11.06516 0.009071125 0.0006110649 0.6248660 ⋯ 2018-07-22 21:30:00 2018-07-22 21:30:00 92.33185 10.348039 -3.5737370 -0.8793750 357.0295 366.6171 -2.9575124 -0.16407725 2018-07-22 22:00:00 3.810747 4.310967e-16 3.270931e-06 3.808663 1.3221299 11.15502 0.008972078 0.0006097459 0.8179345 ⋯ 2018-07-22 22:00:00 2018-07-22 22:00:00 91.72876 10.378867 -3.1005120 -1.1000014 357.4121 366.5117 -3.1911320 -0.17762198 2018-07-22 22:30:00 4.409078 1.620700e-16 -7.665109e-06 4.406794 1.3323178 11.15232 0.008923315 0.0006097643 0.8335655 ⋯ 2018-07-22 22:30:00 2018-07-22 22:30:00 94.30342 10.013587 -3.3438840 -0.9150019 358.8082 365.5634 -3.3741564 -0.19078199 2018-07-22 23:00:00 3.873026 2.977127e-16 -1.294909e-05 3.871143 1.3683514 10.78057 0.008990173 0.0006105977 0.8732912 ⋯ 2018-07-22 23:00:00 2018-07-22 23:00:00 94.73869 9.938861 -3.1489532 -1.1018009 356.8070 364.8172 -3.4803730 -0.19819864 2018-07-22 23:30:00 4.861514 -2.500325e-16 4.084664e-06 4.861716 1.4144546 10.67567 0.008985399 0.0006120489 0.9869727 ⋯ 2018-07-22 23:30:00 2018-07-22 23:30:00 93.70433 9.905066 -3.3879019 -0.9011279 354.2409 364.0890 -3.6521264 -0.21074936 plot_seb(dat$swin,dat$swout,dat$lwin,dat$lwout,dat$sh,dat$lh,dat$shf1) png Call: lm(formula = y ~ x) Residuals: Min 1Q Median 3Q Max -134.13 -19.47 -5.41 28.33 170.39 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 27.66214 5.45569 5.07 1.4e-06 *** x 0.52887 0.02051 25.78 &lt; 2e-16 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 48.56 on 125 degrees of freedom Multiple R-squared: 0.8417, Adjusted R-squared: 0.8405 F-statistic: 664.7 on 1 and 125 DF, p-value: &lt; 2.2e-16 png 8.3 Bowen ratio and evaporative fraction The Bowen ratio \\(BR\\) and the evaporative fraction \\(EF\\) are given by \\[ BR:= \\frac{SH}{LH}\\quad\\quad\\textrm{and}\\quad\\quad EF:= \\frac{LH}{LH+SH} \\] and are both a way to describe the heat transfer by sensible vs latent heat. They are related to the surface (and the water abundance therein) and can be used to compare different surface types in different climates. Therefore, it usually applied on monthly/seasonal/annual averages (so here just exemplarily calculated). print(paste(&quot;BR (average):&quot;, calc_br(mean(dat$sh),mean(dat$lh)))) print(paste(&quot;EF (average):&quot;, calc_ef(mean(dat$sh),mean(dat$lh)))) [1] &quot;BR (average): 1.2715665126865&quot; [1] &quot;EF (average): 0.440224837976387&quot; 8.4 Clear-Sky-Index (CSI) for contextualization (calc_csi) Based on longwave incoming radiation, temperature and humidity, an estimate of the clear-sky-index (CSI) can be derived as ratio of actual emissivity \\(\\epsilon_{actual}\\) and theoretical (clear-sky) emissivity \\(\\epsilon_{theoretical}\\). If \\(\\epsilon_{actual} \\le \\epsilon_{theoretical}\\), i.e. \\(CSI \\le 1\\), than the sky is assumed to be clear-sky (see e.g. in the review paper Lehner et al., 2021). dat$csi=calc_csi(dat$T_mean+273.15,dat$lwin,dat$rh) plot(dat$csi,type=&quot;l&quot;,lwd=2,ylab=&quot;CSI&quot;) png 8.5 Literature Lehner, M., Rotach, M. W. Sfyri, E., and Obleitner, F. (2021). Spatial and temporal variations in near-surface en- ergy fluxes in an Alpine valley under synoptically undisturbed and clear-sky conditions. Q J R Meteorol Soc, 147(737):2173–2196. Mauder, M. and Foken, T. and Cuxart, J. (2020). Surface‑Energy‑Balance Closure over Land: A Review, Boundary-Layer Meteorology 177:395–426. Stoy, P., Mauder, M., Foken, T., and et al (2013). A data-driven analysis of energy balance closure across FLUXNET research sites: The role of landscape scale heterogeneity. Agric For Meteorol, 171:137–152. Wilson, K., Goldstein, A., Falge, E., Aubinet, M., Baldocchi, D., Berbigier, P., Bernhofer, C., Ceulemans, R., Dolman, H., Field, C., Grelle, A., Ibrom, A., Law, B.E., Kowalski, A., Meyers, T., Moncrieff, J., Monson, R., Oechel, W., Tenhunen, J., Valentini, R., Verma, S., 2002. Energy balance closure at FLUXNET sites. Agric. Forest Meteorol. 113, 223–243. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
