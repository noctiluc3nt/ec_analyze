[{"path":"index.html","id":"welcome","chapter":"1 Welcome","heading":"1 Welcome","text":"","code":""},{"path":"step-1-post-processing-of-the-raw-eddy-covariance-data.html","id":"step-1-post-processing-of-the-raw-eddy-covariance-data","chapter":"2 Step 1: Post-processing of the raw eddy-covariance data","heading":"2 Step 1: Post-processing of the raw eddy-covariance data","text":"Example basic post-processing raw eddy-covariance measurements (CSAT3/Campbell Scientific Li-7200/LI-COR closed-path IR gas analyzer) including despiking, rotation, averaging flagging. following notebooks (e.g., 02_basic-turbulence-diagnostics.ipynb) build upon allow detailed analysis (e.g., 03_quadrant-analysis.ipynb).","code":""},{"path":"step-1-post-processing-of-the-raw-eddy-covariance-data.html","id":"eddy-covariance-method","chapter":"2 Step 1: Post-processing of the raw eddy-covariance data","heading":"2.0.1 Eddy-covariance method","text":"eddy-covariance method, Reynolds decomposition applied every measured quantity \\(x\\) \n\\[\nx = \\overline{x} + x' \\quad \\textrm{} \\quad \\overline{x}:= \\frac{1}{t_s} \\int_0^{t_s} x \\: dt,\n\\]\nensemble average replaced time average.\nReynolds postulates (particular \\(\\overline{x'} = 0\\)) follows\n\\[\n    \\overline{xw} = \\overline{x}\\:\\overline{w} + \\overline{x'w'},\n\\]\n\\(\\overline{x'w'}\\) represents vertical flux (\\(w\\): vertical wind speed) quantity \\(x\\) \\(\\overline{xw} = \\overline{x'w'}\\) \\(\\overline{w}=0\\) (intended applied coordinate rotation). post-processing, quality checks, rotation, averaging flagging applied, high-resolution measurements can analyzed using eddy-covariance method. detailed description measurement devices methods can found Foken, 2017.given file contains 30 minutes measurements, just need average one file get 30 minutes averages fluxes. However, notebook 04_multiresolution-decomposition.ipynb look method allows determine suitable averaging times accurately.covariances converted fluxes (unit W/m\\(^2\\)). Since measured temperature (“sonic temperature”) approximately equal virtual temperature, respective flux cov_wT represents buoyancy flux. derive sensible heat flux , called SND-corrected flux cov_wT_snd used. latent heat flux density correction (WPL correction) recommended applied.output contains 30 minutes averages, standard deviations covariances measured quantities, used following notebooks detailed analysis.\ndata.frame: 127 × 30\nNote, different sensors may require different correction methods, see also Foken, 2017. Additionally, angles rotation can also checked verify applied rotation method suitable (longer time periods planar fit alternative, e.g., systematic topographically induced vertical wind speed, stable stratification checked whether angles stay somehow constant flip due sign changes close--zero fluxes).","code":"\n#loading Reddy package\ninstall.packages(\"../src/Reddy_0.0.0.9000.tar.gz\",repos=NULL,source=TRUE)\nlibrary(Reddy)Installing package into ‘/home/lauracma/R/x86_64-pc-linux-gnu-library/4.0’\n(as ‘lib’ is unspecified)\n#ec data files\ndir_in=\"../data/ec-data_10Hz_raw\"\nfiles=list.files(dir_in,full.names=TRUE)\nnf=length(files)\n#allocate output\nvar_out=c(\"time\",\"u_mean\",\"v_mean\",\"w_mean\",\"ws_mean\",\"wd_mean\",\"T_mean\",\"h2o_mean\",\"co2_mean\",\n          \"u_sd\",\"v_sd\",\"w_sd\",\"T_sd\",\"h2o_sd\",\"co2_sd\",\n          \"cov_uv\",\"cov_uw\",\"cov_vw\",\"cov_wT\",\"cov_h2ow\",\"cov_co2w\",\"cov_wT_snd\",\"cov_rhoH2Ow_wpl\",\n          \"rot_angle1\",\"rot_angle2\",\"flag_stationarity\",\"flag_w\",\"flag_distortion\")\nnv=length(var_out)\ndat=data.frame(array(NA,dim=c(nf,nv)))\ncolnames(dat)=var_out\n#postprocessing per file (30 mins)\nfor (i in 1:nf) {\n    tmp=read.table(files[i],sep=\",\",header=T)\n    dat$time[i]=tmp$X[1]\n    #despiking\n    tmp$T_degC=despiking(tmp$T_degC,-40,30)\n    tmp$u_m.s=despiking(tmp$u_m.s,-25,25)\n    tmp$v_m.s=despiking(tmp$v_m.s,-25,25)\n    tmp$w_m.s=despiking(tmp$w_m.s,-5,5)\n    #wind before rotation\n    dat$ws_mean[i]=sqrt(mean(tmp$u_m.s,na.rm=T)^2+mean(tmp$v_m.s,na.rm=T)^2)\n    dat$wd_mean[i]=atan2(mean(tmp$v_m.s,na.rm=T),mean(tmp$u_m.s,na.rm=T))\n    #rotation\n    rot_wind=rotate_double(tmp$u_m.s,tmp$v_m.s,tmp$w_m.s)\n    tmp$u_m.s=rot_wind$u\n    tmp$v_m.s=rot_wind$v\n    tmp$w_m.s=rot_wind$w\n    dat$rot_angle1[i]=rot_wind$theta\n    dat$rot_angle2[i]=rot_wind$phi\n    #averaging\n    dat$u_mean[i]=mean(tmp$u_m.s,na.rm=T)\n    dat$v_mean[i]=mean(tmp$v_m.s,na.rm=T)\n    dat$w_mean[i]=mean(tmp$w_m.s,na.rm=T)\n    dat$T_mean[i]=mean(tmp$T_degC,na.rm=T)\n    #unit conversion for gases\n    tmp$rhoH2O=ppt2rho(tmp$H2O_ppt,dat$T_mean[i]+273.15,87000)\n    tmp$rhoCO2=ppt2rho(tmp$CO2_ppm/1000,dat$T_mean[i]+273.15,87000,gas=\"CO2\")\n    dat$h2o_mean[i]=mean(tmp$rhoH2O,na.rm=T)\n    dat$co2_mean[i]=mean(tmp$rhoCO2,na.rm=T)\n    #sds\n    dat$u_sd[i]=sd(tmp$u_m.s,na.rm=T)\n    dat$v_sd[i]=sd(tmp$v_m.s,na.rm=T)\n    dat$w_sd[i]=sd(tmp$w_m.s,na.rm=T)\n    dat$T_sd[i]=sd(tmp$T_degC,na.rm=T)\n    dat$h2o_sd[i]=sd(tmp$rhoH2O,na.rm=T)\n    dat$co2_sd[i]=sd(tmp$rhoCO2,na.rm=T)\n    #covs\n    dat$cov_uw[i]=cov(tmp$u_m.s,tmp$w_m.s,use=\"pairwise.complete.obs\")\n    dat$cov_uv[i]=cov(tmp$u_m.s,tmp$v_m.s,use=\"pairwise.complete.obs\")\n    dat$cov_vw[i]=cov(tmp$v_m.s,tmp$w_m.s,use=\"pairwise.complete.obs\")\n    dat$cov_wT[i]=cov(tmp$T_degC,tmp$w_m.s,use=\"pairwise.complete.obs\")\n    dat$cov_h2ow[i]=cov(tmp$rhoH2O,tmp$w_m.s,use=\"pairwise.complete.obs\")\n    dat$cov_co2w[i]=cov(tmp$rhoCO2,tmp$w_m.s,use=\"pairwise.complete.obs\")\n    #SND correction\n    dat$cov_wT_snd[i]=SNDcorrection(tmp$u_m.s,tmp$v_m.s,tmp$w_m.s,tmp$T_degC+273.15)\n    #WPL correction\n    #dat$cov_rhoH2Ow_wpl[i]=WPLcorrection(tmp$rhoH2O,w=tmp$w_m.s,Ts=tmp$T_degC+273.15,q=tmp$q)\n    #flagging\n    dat$flag_stationarity[i]=flag_stationarity(tmp$w_m.s,tmp$T_degC,nsub=3000)\n    dat$flag_w[i]=flag_w(dat$w_mean[i])\n    dat$flag_distortion[i]=flag_distortion(tmp$u_m.s,tmp$v_m.s,dir_blocked=c(340,360))\n}\n#calculate fluxes\ndat$sh=cov2sh(dat$cov_wT_snd)\ndat$lh=cov2lh(dat$cov_h2ow)\n#look at output\ndat\nsaveRDS(dat,file=\"../data/ec-data_30min_processed/processed_data_example.rds\")"},{"path":"step-1-post-processing-of-the-raw-eddy-covariance-data.html","id":"literature","chapter":"2 Step 1: Post-processing of the raw eddy-covariance data","heading":"2.0.2 Literature","text":"Foken, T. (2017). Micrometeorology, Springer-Verlag Berlin Heidelberg, DOI: 10.1007/978-3-642-25440-6.","code":""},{"path":"calculation-of-some-basic-turbulence-quantities.html","id":"calculation-of-some-basic-turbulence-quantities","chapter":"3 Calculation of some basic turbulence quantities","heading":"3 Calculation of some basic turbulence quantities","text":"Based half-hourly output first notebook (01_post-processing.ipynb) standard turbulence quantities, .e. stability parameter, friction velocity, TKE, turbulence intensity calculated plotted.","code":"\n#loading Reddy package\ninstall.packages(\"../src/Reddy_0.0.0.9000.tar.gz\",repos=NULL,source=TRUE)\nlibrary(Reddy)\nlibrary(latex2exp)\nkap=function() return(0.4)Installing package into ‘/home/lauracma/R/x86_64-pc-linux-gnu-library/4.0’\n(as ‘lib’ is unspecified)\n#read in processed example data\ndat=readRDS(\"../data/ec-data_30min_processed/processed_data_example.rds\")"},{"path":"calculation-of-some-basic-turbulence-quantities.html","id":"calculation-of-standard-turbulence-diagnostics-and-simple-timeseries-plots","chapter":"3 Calculation of some basic turbulence quantities","heading":"3.1 Calculation of standard turbulence diagnostics and simple timeseries plots","text":", functions Reddy package used calculate turbulent kinetic energy \\(TKE\\), velocity scale TKE \\(V_{TKE}\\), horizontal turbulence intensity \\(TI\\), vertical turbulence intensity \\(I_w\\), friction velocity \\(u_*\\), Obukhov length \\(L\\), stability parameter \\(\\zeta\\) directional shear angle plot timeseries previously post-processed example data.","code":"\n#calculation of some useful turbulence diagnostics\ndat$tke=calc_tke(dat$u_sd,dat$v_sd,dat$w_sd)\ndat$vtke=calc_vtke(dat$u_sd,dat$v_sd,dat$w_sd)\ndat$ti=calc_ti(dat$u_sd,dat$v_sd,dat$ws_mean)\ndat$iw=calc_iw(dat$w_sd,dat$ws_mean)\ndat$ustar=calc_ustar(dat$cov_uw,dat$cov_vw)\ndat$L=calc_L(dat$ustar,dat$T_mean,dat$cov_wT)\ndat$zeta=calc_zeta(4.4,dat$L)\ndat$alpha_uw=calc_dshear(dat$cov_uw,dat$cov_vw)\n#basic timeseries plots\nplot(dat$T_mean,type=\"l\",ylab=\"temperature [°C]\",col=2)\nplot(dat$ws_mean,type=\"l\",ylab=\"wind speed [m/s]\")\nplot(dat$tke,type=\"l\",ylab=TeX(\"TKE [$m^2/s^2$]\"),ylim=c(0,2))\nplot(dat$zeta,type=\"l\",ylab=\"stability parameter [-]\")\nabline(h=0,lty=2)\nplot(dat$ti,type=\"l\",ylab=\"turbulence intensity [-]\",ylim=c(0,1))\npoints(dat$iw,type=\"l\",col=\"gray50\")\nplot(dat$cov_uw,type=\"l\",ylab=TeX(\"cov(u,w) [$m^2/s^2$]\"))\nplot(dat$cov_wT,type=\"l\",ylab=TeX(\"cov(T,w) [$K m/s$]\"))\nplot(dat$cov_h2ow,type=\"l\",ylab=TeX(\"cov(q,w) [$mmol m/s$]\"))\nplot(dat$cov_co2w,type=\"l\",ylab=TeX(\"cov(c,w) [$ppm m/s$]\"))"},{"path":"calculation-of-some-basic-turbulence-quantities.html","id":"regime-plots","chapter":"3 Calculation of some basic turbulence quantities","heading":"3.2 Regime plots","text":"diagnose different turbulence regimes, scatter plots different turbulence diagnostics can used. examples plotting wind speed vs TKE stability parameter vs TKE (see e.g., Sun et al., 2012).","code":"\n#some basic plots\nplot(dat$ws_mean,dat$tke,ylim=c(0,3),xlab=\"wind speed [m/s]\",ylab=TeX(\"TKE [$m^2/s^2$]\"))\ncond=(dat$ws_mean>2)\nfit=lm(dat$tke[cond]~dat$ws_mean[cond])\nabline(fit,col=2,lty=2)\n\nplot(dat$zeta,dat$tke,ylim=c(0,3),xlab=\"stability parameter [m/s]\",ylab=TeX(\"TKE [$m^2/s^2$]\"))"},{"path":"calculation-of-some-basic-turbulence-quantities.html","id":"stability-dependence-with-discrete-binning-binning","chapter":"3 Calculation of some basic turbulence quantities","heading":"3.3 Stability dependence with discrete binning (binning)","text":"Often interesting investigate stability dependence turbulence characteristics. function binning can used, bins one variable based another predefined bins, exemplified dependence sensible heat flux stability parameter. output contains mean, median, 25% 75% quartile per discrete bin dataframe. used variables bins can customized. type analysis usually applied longer timeseries.\nmatrix: 9 × 4 type dbl\n","code":"\nzeta_bins=c(-10^(2:-2),10^(-2:2))\nsh_binned=binning(dat$sh,dat$zeta,zeta_bins)\nsh_binned #look at output\nxbins=c(-5^(2:-1),0,5^(-1:2))\nplot(xbins,sh_binned[,2],type=\"b\",ylim=c(-20,150),lwd=2,col=2,xlab=\"stability parameter [-]\",ylab=TeX(\"SH [W/m$^2$]\"))\npoints(xbins,sh_binned[,3],type=\"l\",lty=2,col=2)\npoints(xbins,sh_binned[,4],type=\"l\",lty=2,col=2)\nabline(h=0,lty=2)\nabline(v=0,lty=2)"},{"path":"calculation-of-some-basic-turbulence-quantities.html","id":"literature-1","chapter":"3 Calculation of some basic turbulence quantities","heading":"3.4 Literature","text":"Sun, J., Mahrt, L., Banta, R. M., Pichugina, Y. L. (2012). Turbulence Regimes Turbulence Intermittency Stable Boundary Layer CASES-99. J Atmos Sci, 69:338–351.","code":""}]
